[
  {
    "objectID": "lectures/Lecture02Rcode.html",
    "href": "lectures/Lecture02Rcode.html",
    "title": "Lecture 2 R Code",
    "section": "",
    "text": "library(tidyverse)\nlibrary(readr)\nlibrary(viridis)\n\n# set figure parameters for knitr\nknitr::opts_chunk$set(\n  fig.align = \"center\", # center align figures\n  fig.asp = 0.618,      # the golden ratio\n  fig.retina = 3,       # dpi multiplier for displaying HTML output on retina\n  fig.height = 4,        # 4 inches\n  dpi = 200             # higher is crisper\n)",
    "crumbs": [
      "Lectures",
      "Lecture 02 R Code"
    ]
  },
  {
    "objectID": "lectures/Lecture02Rcode.html#setup",
    "href": "lectures/Lecture02Rcode.html#setup",
    "title": "Lecture 2 R Code",
    "section": "",
    "text": "library(tidyverse)\nlibrary(readr)\nlibrary(viridis)\n\n# set figure parameters for knitr\nknitr::opts_chunk$set(\n  fig.align = \"center\", # center align figures\n  fig.asp = 0.618,      # the golden ratio\n  fig.retina = 3,       # dpi multiplier for displaying HTML output on retina\n  fig.height = 4,        # 4 inches\n  dpi = 200             # higher is crisper\n)",
    "crumbs": [
      "Lectures",
      "Lecture 02 R Code"
    ]
  },
  {
    "objectID": "lectures/Lecture02Rcode.html#one-continuous-variable",
    "href": "lectures/Lecture02Rcode.html#one-continuous-variable",
    "title": "Lecture 2 R Code",
    "section": "One Continuous variable",
    "text": "One Continuous variable\n\n## --------------------------------------------------\n#| message: false\n#| fig-width: 4.25\n## --------------------------------------------------\n\n\nmovies &lt;- read_csv(\"movies.csv\") \nmovies &lt;- movies %&gt;% filter(budget &gt; 100000000)\n\nggplot(data = movies, aes(x = gross)) +\n  geom_area(stat = \"bin\",\n            fill = \"skyblue\", \n            alpha = 0.5, \n            color = \"blue\") +  # Area under the curve\n  labs(title = \"Gross receipts\",\n       x = \"Gross receipts\") +\n  theme_classic()\n\n## --------------------------------------------------\n#| fig-width: 4.25\nggplot(data = movies, aes(x = gross, fill = rating)) +\n  geom_area(stat = \"bin\",\n            alpha = 0.5) +  \n  labs(title = \"Gross receipts by rating\",\n       x = \"Gross receipts\") +\n  theme_classic()\n\n\n## --------------------------------------------------\n#| fig-width: 4.25\nggplot(data = movies) +\n  geom_density(aes(x = year, color = rating)) +\n  labs(title = \"Movies with $100mil+ budgets\") +\n  xlab(\"Year\") + \n  theme_classic()\n\n\n\n## --------------------------------------------------\n#| fig-width: 4\noptions(scipen = 9999999)\nmovies_a &lt;- movies %&gt;% filter(genre == \"Animation\")\nggplot(data = movies_a) +\n  geom_dotplot(aes(x = budget, fill = rating)) +\n  labs(title = \"Animation Films\") +\n  xlab(\"Budget\") + \n  theme_classic()\n\n\n## --------------------------------------------------\n#| fig-width: 4\nggplot(data = movies_a) +\n  geom_dotplot(aes(x = budget, fill = rating),\n               position = \"jitter\",\n               binwidth = 5000000) +\n  labs(title = \"Animation Films\") +\n  xlab(\"Budget\") + \n  theme_classic()\n\n\n## --------------------------------------------------\n#| fig-width: 4.25\n#| message: false\n#| warning: false\nggplot(movies, aes(x = budget, color = rating)) +\n  geom_freqpoly(binwidth = 7000000) +\n  labs(title = \"Frequency Polygon\",\n       x = \"Scores\",\n       y = \"Frequency\") +\n  theme_minimal()\n\n\n## --------------------------------------------------\n#| fig-width: 4.2\n#| message: false\n#| warning: false\nmovies &lt;- read_csv(\"movies.csv\") \nggplot(movies, aes(x = score)) +\n  geom_histogram(color = \"blue\", fill = \"gold\") +\n  labs(title = \"Histogram\",\n       x = \"Scores\",\n       y = \"Frequency\") +\n  theme_minimal()",
    "crumbs": [
      "Lectures",
      "Lecture 02 R Code"
    ]
  },
  {
    "objectID": "lectures/Lecture02Rcode.html#notes",
    "href": "lectures/Lecture02Rcode.html#notes",
    "title": "Lecture 2 R Code",
    "section": "Notes",
    "text": "Notes\n\ngeom_col requires x and y values.\nThe heights of the bars represent values in the data\nThe trick to ordering is to utilize factors",
    "crumbs": [
      "Lectures",
      "Lecture 02 R Code"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#setup",
    "href": "lectures/Lecture03.html#setup",
    "title": "Lecture03",
    "section": "Setup",
    "text": "Setup\n\n# load packages\nlibrary(tidyverse)\nlibrary(ggthemes)\nlibrary(hrbrthemes)\nlibrary(ggtech)\nlibrary(scales)\nlibrary(glue)\nlibrary(RColorBrewer)\nlibrary(MoMAColors)\nlibrary(ggpubr)\n\n\n# set theme for ggplot2\n#ggplot2::theme_set(ggplot2::theme_minimal(base_size = 14))\n\n# set width of code output\noptions(width = 65)\n\n# set figure parameters for knitr\nknitr::opts_chunk$set(\n  fig.width = 7, # 7\" width\n  fig.asp = 0.618, # the golden ratio\n  fig.retina = 3, # dpi multiplier for displaying HTML output on retina\n  fig.align = \"center\", # center align figures\n  dpi = 300 # higher dpi, sharper image\n)",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#data-for-tonight",
    "href": "lectures/Lecture03.html#data-for-tonight",
    "title": "Lecture03",
    "section": "data for tonight",
    "text": "data for tonight\n\nload(\"./LABuldings.RData\")\nikea &lt;- read_csv(\"https://raw.githubusercontent.com/lewv/S24STATS101A/main/data/ikea.csv\")",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section",
    "href": "lectures/Lecture03.html#section",
    "title": "Lecture03",
    "section": "",
    "text": "Summaries\n\n\n# A tibble: 1,675 × 5\n# Groups:   POSTAL CODE [122]\n   `POSTAL CODE` `PROPERTY TYPE`                   N   freq   pct\n           &lt;dbl&gt; &lt;chr&gt;                         &lt;int&gt;  &lt;dbl&gt; &lt;dbl&gt;\n 1         90001 Distribution Center              18 0.0968    10\n 2         90001 Manufacturing/Industrial Pla…    89 0.478     48\n 3         90001 Mixed Use Property                8 0.0430     4\n 4         90001 Non-Refrigerated Warehouse       48 0.258     26\n 5         90001 Office                            3 0.0161     2\n 6         90001 Other                             9 0.0484     5\n 7         90001 Refrigerated Warehouse            5 0.0269     3\n 8         90001 Self-Storage Facility             6 0.0323     3\n 9         90002 Enclosed Mall                     1 0.0227     2\n10         90002 Fire Station                     10 0.227     23\n# ℹ 1,665 more rows",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-1",
    "href": "lectures/Lecture03.html#section-1",
    "title": "Lecture03",
    "section": "",
    "text": "Summaries\nWe will keep the largest and reverse sort\n\n\n# A tibble: 7 × 4\n  `POSTAL CODE`     N   freq   pct\n          &lt;dbl&gt; &lt;int&gt;  &lt;dbl&gt; &lt;dbl&gt;\n1         91311  1639 0.0336     3\n2         90045  1371 0.0281     3\n3         90028  1318 0.0270     3\n4         90020  1210 0.0248     2\n5         91402  1109 0.0227     2\n6         91406  1099 0.0225     2\n7         90036  1004 0.0206     2",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-2",
    "href": "lectures/Lecture03.html#section-2",
    "title": "Lecture03",
    "section": "",
    "text": "Boxplot of the LA data",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-3",
    "href": "lectures/Lecture03.html#section-3",
    "title": "Lecture03",
    "section": "",
    "text": "Modify the Ikea data\n\nikea4plot &lt;- ikea %&gt;%\n  group_by(`category`) %&gt;%\n         mutate(N = n(),\n                freq = N / sum(N),\n                pct = round((freq*100), 0)) %&gt;%\n  filter(N &gt; 250) %&gt;%\n  ungroup()",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-4",
    "href": "lectures/Lecture03.html#section-4",
    "title": "Lecture03",
    "section": "",
    "text": "Boxplot of the Ikea data",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-5",
    "href": "lectures/Lecture03.html#section-5",
    "title": "Lecture03",
    "section": "",
    "text": "Basic Themes - B & W\nhttps://ggplot2.tidyverse.org/reference/ggtheme.html",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-6",
    "href": "lectures/Lecture03.html#section-6",
    "title": "Lecture03",
    "section": "",
    "text": "Basic Themes - B & W\nhttps://ggplot2.tidyverse.org/reference/ggtheme.html\n\nbox_plot + \n  theme_bw() + \n  theme(axis.text.x = element_text(size = 4))",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-7",
    "href": "lectures/Lecture03.html#section-7",
    "title": "Lecture03",
    "section": "",
    "text": "Basic Themes - Classic\n\nbox_plot + \n  theme_classic() + \n  theme(axis.text.x = element_text(size = 6))",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-8",
    "href": "lectures/Lecture03.html#section-8",
    "title": "Lecture03",
    "section": "",
    "text": "Basic Themes - Dark\n\nplot + \n  geom_col(fill = \"yellow\", color = \"black\") +\n  theme_dark() + \n  theme(axis.text.x = element_text(size = 6))",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-9",
    "href": "lectures/Lecture03.html#section-9",
    "title": "Lecture03",
    "section": "",
    "text": "Basic Themes - Light\n\nplot + \n  theme_light() + \n  theme(axis.text.x = element_text(size = 6))",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-10",
    "href": "lectures/Lecture03.html#section-10",
    "title": "Lecture03",
    "section": "",
    "text": "Basic Themes - Line drawing\n\nplot + \n  theme_linedraw() + \n  theme(axis.text.x = element_text(size = 6))",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-11",
    "href": "lectures/Lecture03.html#section-11",
    "title": "Lecture03",
    "section": "",
    "text": "Basic Themes - Minimal\nThere is also a blank theme.\n\nplot + \n  theme_minimal() + \n  theme(axis.text.x = element_text(size = 6))",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-12",
    "href": "lectures/Lecture03.html#section-12",
    "title": "Lecture03",
    "section": "",
    "text": "Closer look at theme()\n\ntheme_minimal()\n\nList of 136\n $ line                            :List of 6\n  ..$ colour       : chr \"black\"\n  ..$ linewidth    : num 0.5\n  ..$ linetype     : num 1\n  ..$ lineend      : chr \"butt\"\n  ..$ arrow        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_line\" \"element\"\n $ rect                            :List of 5\n  ..$ fill         : chr \"white\"\n  ..$ colour       : chr \"black\"\n  ..$ linewidth    : num 0.5\n  ..$ linetype     : num 1\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\"\n $ text                            :List of 11\n  ..$ family       : chr \"\"\n  ..$ face         : chr \"plain\"\n  ..$ colour       : chr \"black\"\n  ..$ size         : num 11\n  ..$ hjust        : num 0.5\n  ..$ vjust        : num 0.5\n  ..$ angle        : num 0\n  ..$ lineheight   : num 0.9\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ title                           : NULL\n $ aspect.ratio                    : NULL\n $ axis.title                      : NULL\n $ axis.title.x                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 2.75points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.x.top                :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 0\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 2.75points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.x.bottom             : NULL\n $ axis.title.y                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : num 90\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.75points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.y.left               : NULL\n $ axis.title.y.right              :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : num -90\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 2.75points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text                       :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : chr \"grey30\"\n  ..$ size         : 'rel' num 0.8\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 2.2points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x.top                 :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 0\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 2.2points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x.bottom              : NULL\n $ axis.text.y                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 1\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.2points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.y.left                : NULL\n $ axis.text.y.right               :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 2.2points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.theta                 : NULL\n $ axis.text.r                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0.5\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.2points 0points 2.2points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.ticks                      : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ axis.ticks.x                    : NULL\n $ axis.ticks.x.top                : NULL\n $ axis.ticks.x.bottom             : NULL\n $ axis.ticks.y                    : NULL\n $ axis.ticks.y.left               : NULL\n $ axis.ticks.y.right              : NULL\n $ axis.ticks.theta                : NULL\n $ axis.ticks.r                    : NULL\n $ axis.minor.ticks.x.top          : NULL\n $ axis.minor.ticks.x.bottom       : NULL\n $ axis.minor.ticks.y.left         : NULL\n $ axis.minor.ticks.y.right        : NULL\n $ axis.minor.ticks.theta          : NULL\n $ axis.minor.ticks.r              : NULL\n $ axis.ticks.length               : 'simpleUnit' num 2.75points\n  ..- attr(*, \"unit\")= int 8\n $ axis.ticks.length.x             : NULL\n $ axis.ticks.length.x.top         : NULL\n $ axis.ticks.length.x.bottom      : NULL\n $ axis.ticks.length.y             : NULL\n $ axis.ticks.length.y.left        : NULL\n $ axis.ticks.length.y.right       : NULL\n $ axis.ticks.length.theta         : NULL\n $ axis.ticks.length.r             : NULL\n $ axis.minor.ticks.length         : 'rel' num 0.75\n $ axis.minor.ticks.length.x       : NULL\n $ axis.minor.ticks.length.x.top   : NULL\n $ axis.minor.ticks.length.x.bottom: NULL\n $ axis.minor.ticks.length.y       : NULL\n $ axis.minor.ticks.length.y.left  : NULL\n $ axis.minor.ticks.length.y.right : NULL\n $ axis.minor.ticks.length.theta   : NULL\n $ axis.minor.ticks.length.r       : NULL\n $ axis.line                       : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ axis.line.x                     : NULL\n $ axis.line.x.top                 : NULL\n $ axis.line.x.bottom              : NULL\n $ axis.line.y                     : NULL\n $ axis.line.y.left                : NULL\n $ axis.line.y.right               : NULL\n $ axis.line.theta                 : NULL\n $ axis.line.r                     : NULL\n $ legend.background               : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ legend.margin                   : 'margin' num [1:4] 5.5points 5.5points 5.5points 5.5points\n  ..- attr(*, \"unit\")= int 8\n $ legend.spacing                  : 'simpleUnit' num 11points\n  ..- attr(*, \"unit\")= int 8\n $ legend.spacing.x                : NULL\n $ legend.spacing.y                : NULL\n $ legend.key                      : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ legend.key.size                 : 'simpleUnit' num 1.2lines\n  ..- attr(*, \"unit\")= int 3\n $ legend.key.height               : NULL\n $ legend.key.width                : NULL\n $ legend.key.spacing              : 'simpleUnit' num 5.5points\n  ..- attr(*, \"unit\")= int 8\n $ legend.key.spacing.x            : NULL\n $ legend.key.spacing.y            : NULL\n $ legend.frame                    : NULL\n $ legend.ticks                    : NULL\n $ legend.ticks.length             : 'rel' num 0.2\n $ legend.axis.line                : NULL\n $ legend.text                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : 'rel' num 0.8\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.text.position            : NULL\n $ legend.title                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.title.position           : NULL\n $ legend.position                 : chr \"right\"\n $ legend.position.inside          : NULL\n $ legend.direction                : NULL\n $ legend.byrow                    : NULL\n $ legend.justification            : chr \"center\"\n $ legend.justification.top        : NULL\n $ legend.justification.bottom     : NULL\n $ legend.justification.left       : NULL\n $ legend.justification.right      : NULL\n $ legend.justification.inside     : NULL\n $ legend.location                 : NULL\n $ legend.box                      : NULL\n $ legend.box.just                 : NULL\n $ legend.box.margin               : 'margin' num [1:4] 0cm 0cm 0cm 0cm\n  ..- attr(*, \"unit\")= int 1\n $ legend.box.background           : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ legend.box.spacing              : 'simpleUnit' num 11points\n  ..- attr(*, \"unit\")= int 8\n  [list output truncated]\n - attr(*, \"class\")= chr [1:2] \"theme\" \"gg\"\n - attr(*, \"complete\")= logi TRUE\n - attr(*, \"validate\")= logi TRUE",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-13",
    "href": "lectures/Lecture03.html#section-13",
    "title": "Lecture03",
    "section": "",
    "text": "ggthemes\n\nYou can create your own themes\nOr use some of the popular created themes\nand these can be modified",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-14",
    "href": "lectures/Lecture03.html#section-14",
    "title": "Lecture03",
    "section": "",
    "text": "ggthemes - base\n\n# library(ggthemes)\nplot + \n  theme_base() +  # like base R\n  theme(axis.text.x = element_text(size = 6))",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-15",
    "href": "lectures/Lecture03.html#section-15",
    "title": "Lecture03",
    "section": "",
    "text": "ggthemes - calc\n\nplot + \n  theme_calc() +  # like Free Office\n  theme(axis.text.x = element_text(size = 6))",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-16",
    "href": "lectures/Lecture03.html#section-16",
    "title": "Lecture03",
    "section": "",
    "text": "ggthemes - clean\n\nplot + \n  theme_clean() +  # like minimal\n  theme(axis.text.x = element_text(size = 6))",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-17",
    "href": "lectures/Lecture03.html#section-17",
    "title": "Lecture03",
    "section": "",
    "text": "ggthemes - The Economist\n\nplot + \n  theme_economist() +  # mimic The Economist publication\n  theme(axis.text.x = element_text(size = 6))",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-18",
    "href": "lectures/Lecture03.html#section-18",
    "title": "Lecture03",
    "section": "",
    "text": "ggthemes - The Economist white\n\nplot + \n  theme_economist_white() +  # mimic The Economist publication\n  theme(axis.text.x = element_text(size = 6))",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-19",
    "href": "lectures/Lecture03.html#section-19",
    "title": "Lecture03",
    "section": "",
    "text": "ggthemes - examination\nfunction (base_size = 10, base_family = \"sans\", horizontal = TRUE, \n    dkpanel = FALSE) \n{\n    bgcolors &lt;- deframe(ggthemes::ggthemes_data[[\"economist\"]][[\"bg\"]])\n    ret &lt;- theme_foundation(base_size = base_size, base_family = base_family) + \n        theme(line = element_line(colour = \"black\"), rect = element_rect(fill = bgcolors[\"ebg\"], \n            colour = NA, linetype = 1), text = element_text(colour = \"black\"), \n            axis.line = element_line(linewidth = rel(0.8)), axis.line.y = element_blank(), \n            axis.text = element_text(size = rel(1)), axis.text.x = element_text(vjust = 0, \n                margin = margin(t = base_size, unit = \"pt\")), \n            axis.text.x.top = element_text(vjust = 0, margin = margin(b = base_size, \n                unit = \"pt\")), axis.text.y = element_text(hjust = 0, \n                margin = margin(r = base_size, unit = \"pt\")), \n            axis.ticks = element_line(), axis.ticks.y = element_blank(), \n            axis.title = element_text(size = rel(1)), axis.title.x = element_text(), \n            axis.title.y = element_text(angle = 90), axis.ticks.length = unit(-base_size * \n                0.5, \"points\"), legend.background = element_rect(linetype = 0), \n            legend.spacing = unit(base_size * 1.5, \"points\"), \n            legend.key = element_rect(linetype = 0), legend.key.size = unit(1.2, \n                \"lines\"), legend.key.height = NULL, legend.key.width = NULL, \n            legend.text = element_text(size = rel(1.25)), legend.title = element_text(size = rel(1), \n                hjust = 0), legend.position = \"top\", legend.direction = NULL, \n            legend.justification = \"center\", panel.background = element_rect(linetype = 0), \n            panel.border = element_blank(), panel.grid.major = element_line(colour = \"white\", \n                linewidth = rel(1.75)), panel.grid.minor = element_blank(), \n            panel.spacing = unit(0.25, \"lines\"), strip.background = element_rect(fill = bgcolors[\"ebg\"], \n                colour = NA, linetype = 0), strip.text = element_text(size = rel(1.25)), \n            strip.text.x = element_text(), strip.text.y = element_text(angle = -90), \n            plot.background = element_rect(fill = bgcolors[\"blue-gray\"], \n                colour = NA), plot.title = element_text(size = rel(1.5), \n                hjust = 0, face = \"bold\"), plot.margin = unit(c(6, \n                5, 6, 5) * 2, \"points\"), complete = TRUE)\n    if (horizontal) {\n        ret &lt;- ret + theme(panel.grid.major.x = element_blank())\n    }\n    else {\n        ret &lt;- ret + theme(panel.grid.major.y = element_blank())\n    }\n    if (dkpanel == TRUE) {\n        ret &lt;- ret + theme(panel.background = element_rect(fill = unname(bgcolors[\"dark blue-gray\"])), \n            strip.background = element_rect(fill = unname(bgcolors[\"dark blue-gray\"])))\n    }\n    ret\n}\n&lt;bytecode: 0x144448270&gt;\n&lt;environment: namespace:ggthemes&gt;",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-20",
    "href": "lectures/Lecture03.html#section-20",
    "title": "Lecture03",
    "section": "",
    "text": "ggthemes - Excel (new)\n\nplot + \n  theme_excel_new() +  # for fun\n  theme(axis.text.x = element_text(size = 6))",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-21",
    "href": "lectures/Lecture03.html#section-21",
    "title": "Lecture03",
    "section": "",
    "text": "ggthemes - Few (Stephen)\n\nplot + \n  theme_few() +  # applies Few's rules\n  theme(axis.text.x = element_text(size = 6))",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-22",
    "href": "lectures/Lecture03.html#section-22",
    "title": "Lecture03",
    "section": "",
    "text": "ggthemes - fivethirtyeight\n\nplot + \n  theme_fivethirtyeight() +  # inspired by \n  theme(axis.text.x = element_text(size = 8))",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-23",
    "href": "lectures/Lecture03.html#section-23",
    "title": "Lecture03",
    "section": "",
    "text": "ggthemes - Google Doc\n\nplot + \n  theme_gdocs() +  # Google Doc's charts\n  theme(axis.text.x = element_text(size = 6))",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-24",
    "href": "lectures/Lecture03.html#section-24",
    "title": "Lecture03",
    "section": "",
    "text": "ggthemes - Highchart\n\nplot + \n  theme_hc() +  # Highcharts\n  theme(axis.text.x = element_text(size = 8))",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-25",
    "href": "lectures/Lecture03.html#section-25",
    "title": "Lecture03",
    "section": "",
    "text": "ggthemes - inverse\n\nplot + \n  theme_igray() +  # inverse\n  theme(axis.text.x = element_text(size = 6))",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-26",
    "href": "lectures/Lecture03.html#section-26",
    "title": "Lecture03",
    "section": "",
    "text": "ggthemes - pander\n\nplot + \n  theme_pander() +  # pander default\n  theme(axis.text.x = element_text(size = 6))",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-27",
    "href": "lectures/Lecture03.html#section-27",
    "title": "Lecture03",
    "section": "",
    "text": "ggthemes - classic base R\n\nplot + \n  theme_par()  # classic Base r plot",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-28",
    "href": "lectures/Lecture03.html#section-28",
    "title": "Lecture03",
    "section": "",
    "text": "ggthemes - solarized palette\n\nplot + \n  theme_solarized() +  # solarized palette\n  theme(axis.text.x = element_text(size = 7))",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-29",
    "href": "lectures/Lecture03.html#section-29",
    "title": "Lecture03",
    "section": "",
    "text": "ggthemes - solarized variant\n\nplot + \n  theme_solarized_2() +  \n  theme(axis.text.x = element_text(size = 7))",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-30",
    "href": "lectures/Lecture03.html#section-30",
    "title": "Lecture03",
    "section": "",
    "text": "ggthemes - Stata\n\nplot + \n  theme_stata() +  \n  theme(axis.text.x = element_text(size = 6))",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-31",
    "href": "lectures/Lecture03.html#section-31",
    "title": "Lecture03",
    "section": "",
    "text": "ggthemes - Tufte\n\nplot + \n  theme_tufte() +  # based on Tufte's designs\n  theme(axis.text.x = element_text(size = 8))",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-32",
    "href": "lectures/Lecture03.html#section-32",
    "title": "Lecture03",
    "section": "",
    "text": "ggthemes - Wall Street Journal\n\nplot + \n  theme_wsj() + \n  theme(axis.text.x = element_text(size = 7))",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#hrbrthemes",
    "href": "lectures/Lecture03.html#hrbrthemes",
    "title": "Lecture03",
    "section": "hrbrthemes",
    "text": "hrbrthemes",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-33",
    "href": "lectures/Lecture03.html#section-33",
    "title": "Lecture03",
    "section": "",
    "text": "hrbrthemes - Financial Times\n\nplot + \n  theme_ft_rc() +  #Dark theme based on FT’s dark theme\n  theme(axis.text.x = element_text(size = 8))",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-34",
    "href": "lectures/Lecture03.html#section-34",
    "title": "Lecture03",
    "section": "",
    "text": "hrbrthemes - Arial (changed font)\n\nplot + \n  theme_ipsum() # Arial Narrow",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-35",
    "href": "lectures/Lecture03.html#section-35",
    "title": "Lecture03",
    "section": "",
    "text": "hrbrthemes - Goldman Sachs (download, install)\n\nplot + \n  theme_ipsum_gs() # Goldman Sachs Sans\n\n# May need to install - https://design.gs.com/foundation/typography/goldman-sans",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-36",
    "href": "lectures/Lecture03.html#section-36",
    "title": "Lecture03",
    "section": "",
    "text": "hrbrthemes - Roboto (popular)\n\nplot + \n  theme_modern_rc() \n\n  # Modern Roboto Condensed - May need to install font",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-37",
    "href": "lectures/Lecture03.html#section-37",
    "title": "Lecture03",
    "section": "",
    "text": "ggtech - installing from Github\n\n## https://exts.ggplot2.tidyverse.org/ggtech.html\n## run once\n## devtools::install_github(\"ricardo-bion/ggtech\", \n##                          dependencies=TRUE)",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-38",
    "href": "lectures/Lecture03.html#section-38",
    "title": "Lecture03",
    "section": "",
    "text": "installing fonts in R\n\nlibrary(extrafont)\n\n## Facebook \ndownload.file(\"http://social-fonts.com/assets/fonts/facebook-letter-faces/facebook-letter-faces.ttf\", \"/Library/Fonts/facebook-letter-faces.ttf\", method=\"curl\")\n\nfont_import(pattern = 'facebook-letter-faces.ttf', prompt=FALSE)\n\n## Google \ndownload.file(\"http://social-fonts.com/assets/fonts/product-sans/product-sans.ttf\", \"/Library/Fonts/product-sans.ttf\", method=\"curl\")\n\nfont_import(pattern = 'product-sans.ttf', prompt=FALSE)\n\n## Twitter \ndownload.file(\"http://social-fonts.com/assets/fonts/pico-black/pico-black.ttf\", \"/Library/Fonts/pico-black.ttf\", method=\"curl\")\n\ndownload.file(\"http://social-fonts.com/assets/fonts/arista-light/arista-light.ttf\", \"/Library/Fonts/arista-light.ttf\", method=\"curl\")\n\nfont_import(pattern = 'pico-black.ttf', prompt=FALSE)\nfont_import(pattern = 'arista-light.ttf', prompt=FALSE)",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-39",
    "href": "lectures/Lecture03.html#section-39",
    "title": "Lecture03",
    "section": "",
    "text": "ggtech: Facebook\n\nlibrary(ggtech)\nplot + \n  theme_tech(theme = \"facebook\")",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-40",
    "href": "lectures/Lecture03.html#section-40",
    "title": "Lecture03",
    "section": "",
    "text": "ggtech: Google\n\nplot + \n  theme_tech(theme = \"google\")",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-41",
    "href": "lectures/Lecture03.html#section-41",
    "title": "Lecture03",
    "section": "",
    "text": "ggtech: Twitter\n\nplot + \n  theme_tech(theme = \"twitter\")",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-42",
    "href": "lectures/Lecture03.html#section-42",
    "title": "Lecture03",
    "section": "",
    "text": "RColorBrewer\n\nis a package of palettes for making graphics that are visually appealing\nthe palettes were created to address common visualization problems\nthe palettes properly optimized for readability/accessiblity\npretty + functional\nintegrates with ggplot2\nColorBrewer is also in Python",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-43",
    "href": "lectures/Lecture03.html#section-43",
    "title": "Lecture03",
    "section": "",
    "text": "RColorBrewer\nHas palettes for different kinds of data:\n\nSequential palettes are for data that has ordering\nDiverging palettes are for data where the extremes are important and data deviates around a center (e.g., baseline temperature or health measure).\nQualitative palettes for categorical data",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-44",
    "href": "lectures/Lecture03.html#section-44",
    "title": "Lecture03",
    "section": "",
    "text": "palettes\n\ndisplay.brewer.all()\n\n ## ### Example Application\n\nggplot(data=iris, aes(x=Species, y=Petal.Length, fill=Species)) +\n  geom_boxplot() +\n  scale_fill_brewer(palette = \"BrBG\")",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-45",
    "href": "lectures/Lecture03.html#section-45",
    "title": "Lecture03",
    "section": "",
    "text": "Extract colors",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-46",
    "href": "lectures/Lecture03.html#section-46",
    "title": "Lecture03",
    "section": "",
    "text": "installing from GitHub\n\n# install.packages(\"devtools\")\ndevtools::install_github(\"BlakeRMills/MoMAColors\")\n\n\nhttps://github.com/BlakeRMills/MoMAColors\nJust an example of custom palettes",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-47",
    "href": "lectures/Lecture03.html#section-47",
    "title": "Lecture03",
    "section": "",
    "text": "MoMA colors - Example with fill\n\nggplot(data=iris, aes(x=Species, y=Petal.Length, fill=Species)) +\n  geom_violin() +\n  scale_fill_manual(values=moma.colors(\"Connors\", 3))",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-48",
    "href": "lectures/Lecture03.html#section-48",
    "title": "Lecture03",
    "section": "",
    "text": "MoMA colors - Example with color discrete\n\nggplot(data=iris, aes(x=Sepal.Length, y=Sepal.Width, color=Species)) +\n  geom_point(size=2) +\n  scale_color_moma_d(\"Warhol\") # discrete\n\n\n\n\n\n\n\n\nMoMA colors - Example with color continuous\n\nggplot(data=iris, aes(x=Species, y=Sepal.Width, color=Sepal.Width)) +\n  geom_point(size=3) +\n  scale_color_gradientn(colors=moma.colors(\"Flash\"))",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-49",
    "href": "lectures/Lecture03.html#section-49",
    "title": "Lecture03",
    "section": "",
    "text": "Add your own colors\n\nucla_colors &lt;- c(\"#2774AE\",\"#FFD100\",\"#DAEBFE\")\n\nggplot(data=iris, aes(x=Species, y=Petal.Length, fill=Species)) +\n  geom_violin() +\n  scale_fill_manual(values=ucla_colors)",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-50",
    "href": "lectures/Lecture03.html#section-50",
    "title": "Lecture03",
    "section": "",
    "text": "ggpubr - enhancements for publication\n\nPerhaps you want several plots on a single figure\nOr slightly nicer basic statistical graphics with less work!",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-51",
    "href": "lectures/Lecture03.html#section-51",
    "title": "Lecture03",
    "section": "",
    "text": "gghistogram\n\ngghistogram(ikea4plot, x = \"price\",\n   add = \"mean\", rug = TRUE,\n   color = \"other_colors\", fill = \"other_colors\", bins= 15)",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-52",
    "href": "lectures/Lecture03.html#section-52",
    "title": "Lecture03",
    "section": "",
    "text": "ggboxplot\n\nmy_comp &lt;- list(c(\"setosa\", \"versicolor\"), c(\"versicolor\", \"virginica\"), c(\"setosa\", \"virginica\"))\n\nggviolin(iris, x = \"Species\", y = \"Sepal.Length\", fill = \"Species\",\n         add = \"boxplot\", add.params = list(fill = \"white\"))+\n   stat_compare_means(comparisons = my_comp) +\n   stat_compare_means(label.y = 7)",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture03.html#section-53",
    "href": "lectures/Lecture03.html#section-53",
    "title": "Lecture03",
    "section": "",
    "text": "ggarrange\nSuppose I have two saved ggplots, they can exist in the same graphic:\n\nggarrange(ggplot1, ggplot2, ncol = 2)",
    "crumbs": [
      "Lectures",
      "Lecture 03"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#setup",
    "href": "lectures/Lecture06.html#setup",
    "title": "Lecture 06",
    "section": "Setup",
    "text": "Setup\n\nlibrary(readr)\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(ggspatial)\nlibrary(knitr)\nlibrary(maptiles) # extra maps\nlibrary(tidyterra) # extra geoms\nlibrary(maps)\nlibrary(leaflet)\noptions(dplyr.width = Inf, dplyr.print_max = 1e9,  width = 144)",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section",
    "href": "lectures/Lecture06.html#section",
    "title": "Lecture 06",
    "section": "",
    "text": "What we need to start\n\nSome data\nWith coordinates\n\n\n\ndispensary &lt;- read_csv(\"https://raw.githubusercontent.com/lewv/S24STATS101A/main/data/dispensary.csv\")\nglimpse(dispensary) \n\nRows: 688\nColumns: 9\n$ YEAR_START       &lt;dbl&gt; 2007, 2024, 2022, 2006, 2018, 2023, 2024, 2021, 2024, 2023, 2018, 2022, 2024, 2006, 2023, 2018, 2018, 2024, 2007, 202…\n$ `BUSINESS NAME`  &lt;chr&gt; \"CANNATOPIA GARDENS\", \"STANLEY ALLEY HOLDINGS LLC\", \"SAN PEDRO ISH LLC\", \"THE VAULT WOODLAND HILLS\", \"CLARMONTI CONSU…\n$ `DBA NAME`       &lt;chr&gt; \"CANNA SYLMAR\", NA, \"GOAT GLOBAL SOUTH LA\", \"MOTHER NATURE'S REMEDY\", NA, \"LA BREA COLLECTIVE\", NA, \"OFF THE CHARTS\",…\n$ `STREET ADDRESS` &lt;chr&gt; \"13509 HUBBARD STREET\", \"6218 LANKERSHIM BLVD\", \"2522  S CENTRAL AVENUE    #2534\", \"22815   VENTURA BLVD\", \"945  E 10…\n$ CITY             &lt;chr&gt; \"SYLMAR\", \"NORTH HOLLYWOOD\", \"LOS ANGELES\", \"WOODLAND HILLS\", \"LOS ANGELES\", \"LOS ANGELES\", \"NORTH HILLS\", \"LOS ANGEL…\n$ ZIP_CODE         &lt;dbl&gt; 91342, 91606, 90011, 91364, 90021, 90019, 91343, 90038, 90015, 91342, 90021, 91311, 91601, 90012, 90001, 90021, 90023…\n$ longitude        &lt;dbl&gt; -118.4274, -118.3857, -118.2544, -118.6240, -118.2472, -118.3478, -118.4946, -118.3408, -118.2543, -118.4152, -118.24…\n$ latitude         &lt;dbl&gt; 34.3099, 34.1839, 34.0190, 34.1659, 34.0333, 34.0482, 34.2222, 34.0836, 34.0342, 34.2927, 34.0257, 34.2457, 34.1605, …\n$ COUNCIL_DISTRICT &lt;dbl&gt; 7, 2, 9, 3, 14, 10, 12, 5, 14, 7, 14, 12, 2, 14, 9, 14, 14, 8, 6, 13, 2, 4, 13, 14, 8, 5, 10, 9, 14, 14, 3, 14, 14, 7…",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-1",
    "href": "lectures/Lecture06.html#section-1",
    "title": "Lecture 06",
    "section": "",
    "text": "Always check\n\nkable(head(dispensary))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYEAR_START\nBUSINESS NAME\nDBA NAME\nSTREET ADDRESS\nCITY\nZIP_CODE\nlongitude\nlatitude\nCOUNCIL_DISTRICT\n\n\n\n\n2007\nCANNATOPIA GARDENS\nCANNA SYLMAR\n13509 HUBBARD STREET\nSYLMAR\n91342\n-118.4274\n34.3099\n7\n\n\n2024\nSTANLEY ALLEY HOLDINGS LLC\nNA\n6218 LANKERSHIM BLVD\nNORTH HOLLYWOOD\n91606\n-118.3857\n34.1839\n2\n\n\n2022\nSAN PEDRO ISH LLC\nGOAT GLOBAL SOUTH LA\n2522 S CENTRAL AVENUE #2534\nLOS ANGELES\n90011\n-118.2544\n34.0190\n9\n\n\n2006\nTHE VAULT WOODLAND HILLS\nMOTHER NATURE’S REMEDY\n22815 VENTURA BLVD\nWOODLAND HILLS\n91364\n-118.6240\n34.1659\n3\n\n\n2018\nCLARMONTI CONSULTING LLC\nNA\n945 E 10TH STREET #\nLOS ANGELES\n90021\n-118.2472\n34.0333\n14\n\n\n2023\nPEACE AND JOY LLC\nLA BREA COLLECTIVE\n5057 W PICO BLVD\nLOS ANGELES\n90019\n-118.3478\n34.0482\n10",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-2",
    "href": "lectures/Lecture06.html#section-2",
    "title": "Lecture 06",
    "section": "",
    "text": "Some light data management\n\ndispensary &lt;- dispensary %&gt;% \n  mutate(COUNCIL_DISTRICT = as.factor(COUNCIL_DISTRICT),\n         YEAR_CLASS = cut(YEAR_START, c(-Inf, 2015, 2018, 2021, Inf),\n                          labels = c(\"Pre-2016\", \"2016-2018\", \"2019-2021\", \"2022-present\")))\n  \n# check\ndispensary %&gt;% group_by(YEAR_START, YEAR_CLASS) %&gt;% tally()\n\n# A tibble: 21 × 3\n# Groups:   YEAR_START [21]\n   YEAR_START YEAR_CLASS       n\n        &lt;dbl&gt; &lt;fct&gt;        &lt;int&gt;\n 1       2000 Pre-2016         1\n 2       2005 Pre-2016         5\n 3       2006 Pre-2016        70\n 4       2007 Pre-2016        76\n 5       2008 Pre-2016         1\n 6       2009 Pre-2016         3\n 7       2010 Pre-2016         1\n 8       2011 Pre-2016         7\n 9       2012 Pre-2016         4\n10       2013 Pre-2016         1\n11       2014 Pre-2016         7\n12       2015 Pre-2016         1\n13       2016 2016-2018        3\n14       2017 2016-2018        2\n15       2018 2016-2018      231\n16       2019 2019-2021        6\n17       2020 2019-2021        9\n18       2021 2019-2021       56\n19       2022 2022-present   121\n20       2023 2022-present    75\n21       2024 2022-present     8",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-3",
    "href": "lectures/Lecture06.html#section-3",
    "title": "Lecture 06",
    "section": "",
    "text": "Simplest - use geom_point\nThe simplest type of map is a scatterplot with XY points plotted.\n\nggplot(dispensary, \n       aes(x = longitude, y = latitude, color =  COUNCIL_DISTRICT)) +\n         geom_point() +\n         theme_classic() +\n         theme(legend.position = \"none\")",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-4",
    "href": "lectures/Lecture06.html#section-4",
    "title": "Lecture 06",
    "section": "",
    "text": "geom_point with shape too\n\nggplot(dispensary, \n       aes(x = longitude, y = latitude, color =  YEAR_CLASS)) +\n       geom_point(aes(shape=YEAR_CLASS), size=2) +  \n       scale_color_manual(values = c(\"red\",\"green\",\"cyan\", \"black\")) +\n       theme_classic()",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-5",
    "href": "lectures/Lecture06.html#section-5",
    "title": "Lecture 06",
    "section": "",
    "text": "The sf package in R\n\nThis package has tools for geographic data operations.\nIt integrates with tidyverse easily (e.g., ggplot, lubridate)\nUses the “simple features” standard for storing and manipulating spatial data.\nIt can represent geometric objects like points, lines, polygons, and more complex objects like multipoints, multilines, and multipolygons.\nSee Wikipedia for more information about the simple features standard",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-6",
    "href": "lectures/Lecture06.html#section-6",
    "title": "Lecture 06",
    "section": "",
    "text": "Some technical background about sf in R\n\nAn sf object is a data frame where each row represents a spatial feature (such as a geographic location or area), and each column contains the attributes associated with that feature.\nOne of the columns is a special list-column that contains geometry data in a format understood by the sf package\nThe geometries in sf objects include POINT, LINESTRING, POLYGON, MULTIPOINT, MULTILINESTRING, MULTIPOLYGON and can represent almost any kind of spatial data.\nThe sf package is designed work with dplyr, ggplot2, and other tidyverse packages\nThe sf package allows import/export to other spatial data formats,",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-7",
    "href": "lectures/Lecture06.html#section-7",
    "title": "Lecture 06",
    "section": "",
    "text": "Example - Convert a data frame with point coordinates\n\n# Convert the data frame to an sf object\npoints_sf &lt;- st_as_sf(dispensary, \n                      coords = c(\"longitude\", \"latitude\"), \n                      crs = 4326,\n                      remove = FALSE)\n\n\nst_as_sf() converts a non-spatial feature object to spatial feature\nfor point data, need the columns with the coordinates (x, y)\ncrs is the coordinate reference sysem\nremove = FALSE keep the original variables",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-8",
    "href": "lectures/Lecture06.html#section-8",
    "title": "Lecture 06",
    "section": "",
    "text": "What is a crs = 4326?\n\nCRS means “Coordinate Reference System”. The CRS defines how our 2D map relates to the corresponding locations on Earth.\nCRS states how the data is to be projected and how to interpret the coordinate system used in the data. It helps to align spatial data from different sources\n4326 refers to a particular (there are many) CRS — WGS 84 (World Geodetic System 1984): This is the standard coordinate system used by the Global Positioning System (GPS)\nKnowing which CRS matters when we bring in additional spatial information",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-9",
    "href": "lectures/Lecture06.html#section-9",
    "title": "Lecture 06",
    "section": "",
    "text": "Examine its structure\n\nstr(points_sf)\n\nsf [688 × 11] (S3: sf/tbl_df/tbl/data.frame)\n $ YEAR_START      : num [1:688] 2007 2024 2022 2006 2018 ...\n $ BUSINESS NAME   : chr [1:688] \"CANNATOPIA GARDENS\" \"STANLEY ALLEY HOLDINGS LLC\" \"SAN PEDRO ISH LLC\" \"THE VAULT WOODLAND HILLS\" ...\n $ DBA NAME        : chr [1:688] \"CANNA SYLMAR\" NA \"GOAT GLOBAL SOUTH LA\" \"MOTHER NATURE'S REMEDY\" ...\n $ STREET ADDRESS  : chr [1:688] \"13509 HUBBARD STREET\" \"6218 LANKERSHIM BLVD\" \"2522  S CENTRAL AVENUE    #2534\" \"22815   VENTURA BLVD\" ...\n $ CITY            : chr [1:688] \"SYLMAR\" \"NORTH HOLLYWOOD\" \"LOS ANGELES\" \"WOODLAND HILLS\" ...\n $ ZIP_CODE        : num [1:688] 91342 91606 90011 91364 90021 ...\n $ longitude       : num [1:688] -118 -118 -118 -119 -118 ...\n $ latitude        : num [1:688] 34.3 34.2 34 34.2 34 ...\n $ COUNCIL_DISTRICT: Factor w/ 16 levels \"0\",\"1\",\"2\",\"3\",..: 8 3 10 4 15 11 13 6 15 8 ...\n $ YEAR_CLASS      : Factor w/ 4 levels \"Pre-2016\",\"2016-2018\",..: 1 4 4 1 2 4 4 3 4 4 ...\n $ geometry        :sfc_POINT of length 688; first list element:  'XY' num [1:2] -118.4 34.3\n - attr(*, \"sf_column\")= chr \"geometry\"\n - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA NA NA NA NA NA NA NA NA\n  ..- attr(*, \"names\")= chr [1:10] \"YEAR_START\" \"BUSINESS NAME\" \"DBA NAME\" \"STREET ADDRESS\" ...",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-10",
    "href": "lectures/Lecture06.html#section-10",
    "title": "Lecture 06",
    "section": "",
    "text": "still ggplot, still ugly\n\ndist_extent &lt;- st_bbox(points_sf[points_sf$COUNCIL_DISTRICT == 5,])\ndist5 &lt;- points_sf[points_sf$COUNCIL_DISTRICT == 5,]\n\nbuffer_size &lt;- 0.01  \n\n# Expand the bounding box by the buffer size\nexpanded_extent &lt;- c(\n  xmin = dist_extent$xmin - buffer_size,\n  xmax = dist_extent$xmax + buffer_size,\n  ymin = dist_extent$ymin - buffer_size,\n  ymax = dist_extent$ymax + buffer_size\n)\n\nggplot() +\n  geom_sf(data = dist5) +\n  geom_sf_label(data = dist5, aes(label = `BUSINESS NAME`), size = 2) + \n  coord_sf(xlim = c(expanded_extent[1], expanded_extent[2]), \n           ylim = c(expanded_extent[3], expanded_extent[4]),\n           expand = FALSE) +\n  theme_dark() +\n  theme(legend.position = \"none\")",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-11",
    "href": "lectures/Lecture06.html#section-11",
    "title": "Lecture 06",
    "section": "",
    "text": "Load a basemap (polygons)\nWe don’t have a good reference for our points, they are just points or worse, labels. A basemap can provide administrative boundaries, roads etc. This one, from the Los Angeles Times, is a geojson file of neighborhood boundaries.\n\nbasemap &lt;- st_read(\"../../../LA_Times_Neighborhood_Boundaries.geojson\")\n\nReading layer `7a495245-19b6-4449-b5b5-024a29431bbe2020328-1-walab9.vpxce' from data source \n  `/Users/vivian/Desktop/SP24STATS422/LA_Times_Neighborhood_Boundaries.geojson' using driver `GeoJSON'\nSimple feature collection with 114 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -118.6681 ymin: 33.70467 xmax: -118.1554 ymax: 34.33731\nGeodetic CRS:  WGS 84",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-12",
    "href": "lectures/Lecture06.html#section-12",
    "title": "Lecture 06",
    "section": "",
    "text": "Examine the structure\nstr() can be helpful when you are trying understand new R objects\n\nstr(basemap)\n\nClasses 'sf' and 'data.frame':  114 obs. of  3 variables:\n $ OBJECTID: int  1 2 3 4 5 6 7 8 9 10 ...\n $ name    : chr  \"Adams-Normandie\" \"Arleta\" \"Arlington Heights\" \"Atwater Village\" ...\n $ geometry:sfc_MULTIPOLYGON of length 114; first list element: List of 1\n  ..$ :List of 1\n  .. ..$ : num [1:14, 1:2] -118 -118 -118 -118 -118 ...\n  ..- attr(*, \"class\")= chr [1:3] \"XY\" \"MULTIPOLYGON\" \"sfg\"\n - attr(*, \"sf_column\")= chr \"geometry\"\n - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA\n  ..- attr(*, \"names\")= chr [1:2] \"OBJECTID\" \"name\"",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-13",
    "href": "lectures/Lecture06.html#section-13",
    "title": "Lecture 06",
    "section": "",
    "text": "Basemap\nWe can plot polygons as easily as points\n\nggplot() +\n  geom_sf(data = basemap) +\n  theme_void()",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-14",
    "href": "lectures/Lecture06.html#section-14",
    "title": "Lecture 06",
    "section": "",
    "text": "Basemap modifies easily\nWith knowledge about the structure of the basemap, we can modify it using dplyr or base R functions:\n\nwestside &lt;- basemap %&gt;% filter(name %in% c(\"Westwood\", \"West Los Angeles\", \"Sawtelle\", \n\"Palms\", \"Mar Vista\", \"Cheviot Hills\", \"Century City\", \"Rancho Park\"))\n\nggplot(westside) +\n  geom_sf(data = westside, aes(fill = as.factor(name))) +\n  geom_sf_text(aes(label = name)) +\n  theme(legend.position = \"none\")",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-15",
    "href": "lectures/Lecture06.html#section-15",
    "title": "Lecture 06",
    "section": "",
    "text": "Apply it\n\nggplot(data = points_sf) +\n  geom_sf(data = basemap) +\n  geom_sf(aes(color = YEAR_CLASS), alpha = 0.5) +\n  labs(title = \"Map of Los Angeles Dispenaries\") +\n  theme_minimal()",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-16",
    "href": "lectures/Lecture06.html#section-16",
    "title": "Lecture 06",
    "section": "",
    "text": "Also\n\nwestside_extent &lt;- st_bbox(westside)\n\nggplot(data = dist5) +\n  geom_sf(data = westside, aes(fill = as.factor(name))) +\n  geom_sf_label(data = westside, aes(label = name), size = 2, color = \"black\", \nfill = \"NA\") +\n  geom_sf_label(data = dist5, aes(label = `BUSINESS NAME`), size = 2, color = \"black\", fill = \"green\") + \n  coord_sf(xlim = c(westside_extent$xmin, westside_extent$xmax-0.003), \n           ylim = c(westside_extent$ymin, westside_extent$ymax),\n           expand = FALSE) +\n  labs(title = \"Map of West Los Angeles Dispenaries\") +\n  theme_void()  +\n  theme(legend.position = \"none\")",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-17",
    "href": "lectures/Lecture06.html#section-17",
    "title": "Lecture 06",
    "section": "",
    "text": "Finding basemaps\nYou can find these all over the internet. Be forewarned, some can be quite large and complicated.\nCity of LA\nCounty of LA\nState of California\nUS Census\nNTS\nArcgis",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-18",
    "href": "lectures/Lecture06.html#section-18",
    "title": "Lecture 06",
    "section": "",
    "text": "Other basemaps libraries\n\nlibrary(maptiles) # extra maps\nlibrary(tidyterra) # extra geoms\n\nbasemap &lt;- get_tiles(points_sf, provider = \"OpenStreetMap\")",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-19",
    "href": "lectures/Lecture06.html#section-19",
    "title": "Lecture 06",
    "section": "",
    "text": "Open Street Map\n\nggplot(data = points_sf) +\n  geom_spatraster_rgb(data = basemap) +\n  geom_sf(data = points_sf, color = \"red\", alpha = 0.2) +\n  labs(title = \"Map of Los Angeles Dispenaries\") +\n  #coord_sf(xlim = c(-118.8, -118), ylim = c(33.6, 34.4)) + \n  theme_void()",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-20",
    "href": "lectures/Lecture06.html#section-20",
    "title": "Lecture 06",
    "section": "",
    "text": "Maps are layers… order matters\nThis will just cover the points, some throw errors\n\nggplot(data = points_sf) +\n  geom_sf(data = points_sf, color = \"red\", alpha = 0.2) +\n  geom_spatraster_rgb(data = basemap) +\n  labs(title = \"Map of Los Angeles Dispenaries\") +\n  theme_void()",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-21",
    "href": "lectures/Lecture06.html#section-21",
    "title": "Lecture 06",
    "section": "",
    "text": "ESRI + Shapefile\n\nESRI (Environmental Systems Research Institute) dominates inGIS software and solutions - environmental management, local government, utilities, transportation\nESRI is used for mapping, spatial analysis and also decision-making with geographic data..\nThe Shapefile a data format for GIS software. It is developed and regulated by ESRI it stores the location, shape, and attributes of geographic features in a map.",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-22",
    "href": "lectures/Lecture06.html#section-22",
    "title": "Lecture 06",
    "section": "",
    "text": "Inside a shapefile\n\nA shapefile is actually a folder/directory consisting of at minimum three files.\nAll 3 must be present for the shapefile to be complete and functional:\n\n.shp — the file that stores the geometric location and shape of all features.\n.shx — the shape index format; a positional index of the feature geometry to allow for seeking forward quickly to the geometry of a feature in the .shp file.\n.dbf — an attribute table for each shape, in dBase IV (1979) format.",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-23",
    "href": "lectures/Lecture06.html#section-23",
    "title": "Lecture 06",
    "section": "",
    "text": "Shapefiles - boundaries\nCommonly seen as boundaries (but could have only points or lines)\nDownloaded a shapefile for the 50 US states (notice the crs is different)\n\nst_layers(\"../../../cb_2018_us_state_20m\")\n\nDriver: ESRI Shapefile \nAvailable layers:\n            layer_name geometry_type features fields crs_name\n1 cb_2018_us_state_20m       Polygon       52      9    NAD83",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-24",
    "href": "lectures/Lecture06.html#section-24",
    "title": "Lecture 06",
    "section": "",
    "text": "Shapefiles - st_read()\nActually transform it into an R object:\n\nUS_STATE &lt;- st_read(\"../../../cb_2018_us_state_20m\", layer = \"cb_2018_us_state_20m\")\n\nReading layer `cb_2018_us_state_20m' from data source `/Users/vivian/Desktop/SP24STATS422/cb_2018_us_state_20m' using driver `ESRI Shapefile'\nSimple feature collection with 52 features and 9 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -179.1743 ymin: 17.91377 xmax: 179.7739 ymax: 71.35256\nGeodetic CRS:  NAD83",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-25",
    "href": "lectures/Lecture06.html#section-25",
    "title": "Lecture 06",
    "section": "",
    "text": "Shapefiles - str()\nSee the contents\n\nstr(US_STATE)\n\nClasses 'sf' and 'data.frame':  52 obs. of  10 variables:\n $ STATEFP : chr  \"24\" \"19\" \"10\" \"39\" ...\n $ STATENS : chr  \"01714934\" \"01779785\" \"01779781\" \"01085497\" ...\n $ AFFGEOID: chr  \"0400000US24\" \"0400000US19\" \"0400000US10\" \"0400000US39\" ...\n $ GEOID   : chr  \"24\" \"19\" \"10\" \"39\" ...\n $ STUSPS  : chr  \"MD\" \"IA\" \"DE\" \"OH\" ...\n $ NAME    : chr  \"Maryland\" \"Iowa\" \"Delaware\" \"Ohio\" ...\n $ LSAD    : chr  \"00\" \"00\" \"00\" \"00\" ...\n $ ALAND   : num  2.52e+10 1.45e+11 5.05e+09 1.06e+11 1.16e+11 ...\n $ AWATER  : num  6.98e+09 1.08e+09 1.40e+09 1.03e+10 3.39e+09 ...\n $ geometry:sfc_MULTIPOLYGON of length 52; first list element: List of 2\n  ..$ :List of 1\n  .. ..$ : num [1:6, 1:2] -76 -76 -76 -76 -76 ...\n  ..$ :List of 1\n  .. ..$ : num [1:261, 1:2] -79.5 -79.5 -79.5 -79.4 -79 ...\n  ..- attr(*, \"class\")= chr [1:3] \"XY\" \"MULTIPOLYGON\" \"sfg\"\n - attr(*, \"sf_column\")= chr \"geometry\"\n - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA NA NA NA NA NA NA NA\n  ..- attr(*, \"names\")= chr [1:9] \"STATEFP\" \"STATENS\" \"AFFGEOID\" \"GEOID\" ...",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-26",
    "href": "lectures/Lecture06.html#section-26",
    "title": "Lecture 06",
    "section": "",
    "text": "Plot\nAdding a basemap is optional (but easy)\n\nbasemap &lt;- get_tiles(US_STATE, provider = \"OpenStreetMap\")\n\nuse ggplot\n\nggplot(data = US_STATE) +\n  geom_spatraster_rgb(data = basemap) +\n  geom_sf(color = \"blue\", fill = \"cornflowerblue\") + \n  coord_sf(xlim = c(-171.791110603, -66.96466), ylim = c(18.91619, 71.3577635769)) + \n  labs(title = \"US MAP\") +\n  theme(legend.position = \"none\")",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-27",
    "href": "lectures/Lecture06.html#section-27",
    "title": "Lecture 06",
    "section": "",
    "text": "Bounding Boxes\nSometimes you need to know the limits around a geography:\nhttps://gist.github.com/graydon/11198540\nI needed limits for the USA map because Guam was included but I thought the extent was too large",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-28",
    "href": "lectures/Lecture06.html#section-28",
    "title": "Lecture 06",
    "section": "",
    "text": "Lines\nRoads (in this example trails) are just lines as we see in this shapefile. This originated from the National Parks Service or the National Geological Survey and are publicly available\n\nst_layers(\"../../../TRAN_Wyoming_State_Shape\")\n\nDriver: ESRI Shapefile \nAvailable layers:\n           layer_name geometry_type features fields crs_name\n1 Trans_AirportRunway       Polygon      129     16    NAD83\n2  Trans_AirportPoint         Point      248     14    NAD83\n3   Trans_RailFeature   Line String     2317     16    NAD83\n4  Trans_TrailSegment   Line String     5910     29    NAD83\n5   Trans_RoadSegment   Line String   302213     26    NAD83\n6  Meta_ProcessDetail            NA      103     15     &lt;NA&gt;\n7  Meta_DatasetDetail            NA       39     26     &lt;NA&gt;\n8 BPFeatureToMetadata            NA   393665      3     &lt;NA&gt;",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-29",
    "href": "lectures/Lecture06.html#section-29",
    "title": "Lecture 06",
    "section": "",
    "text": "Reading only the Trails\n\nWY_TRAIL &lt;- st_read(\"../../../TRAN_Wyoming_State_Shape\", layer = \"Trans_TrailSegment\")\n\nReading layer `Trans_TrailSegment' from data source `/Users/vivian/Desktop/SP24STATS422/TRAN_Wyoming_State_Shape' using driver `ESRI Shapefile'\nSimple feature collection with 5910 features and 29 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: -111.0545 ymin: 40.99478 xmax: -104.0532 ymax: 45.00479\nGeodetic CRS:  NAD83\n\n\nCheck its structure\n\nstr(WY_TRAIL)\n\nClasses 'sf' and 'data.frame':  5910 obs. of  30 variables:\n $ permanenti: chr  \"bf1004df-5f00-4e36-965c-35a82e4ac3e9\" \"07c816f6-cc60-48f9-98f1-c906f7158909\" \"5d6d71c5-fe6f-491f-b6b9-28b55d011914\" \"221bb537-8975-4f7e-bba8-1151f697feb5\" ...\n $ name      : chr  \"South Boundary Trail: Grassy Lake-South Entrance\" \"Cement 1601\" \"Cook Lake\" \"Sundance  East Fork Quarry\" ...\n $ namealtern: chr  NA NA NA NA ...\n $ trailnumbe: chr  NA NA \"206\" \"206\" ...\n $ trailnum_1: chr  NA \"206\" NA NA ...\n $ sourcefeat: chr  \"Yellowstone National Park\" NA NA NA ...\n $ sourcedata: chr  \"{A2B9A873-ACAC-4D1C-B014-5B090D31938D}\" \"{94D89690-09E1-44DB-AC11-0ECB4C5D1C13}\" \"{94D89690-09E1-44DB-AC11-0ECB4C5D1C13}\" \"{94D89690-09E1-44DB-AC11-0ECB4C5D1C13}\" ...\n $ sourceda_1: chr  \"NPS Trails 10/2019\" \"USFS Trails 12/2017\" \"USFS Trails 12/2017\" \"USFS Trails 12/2017\" ...\n $ sourceorig: chr  \"National Park Service\" \"U.S. Forest Service\" \"U.S. Forest Service\" \"U.S. Forest Service\" ...\n $ loaddate  : Date, format: \"2020-01-06\" \"2019-12-09\" \"2019-12-09\" \"2020-01-06\" ...\n $ trailtype : chr  \"Terra Trail\" \"Terra Trail\" \"Terra Trail\" \"Terra Trail\" ...\n $ hikerpedes: chr  \"Y\" \"Y\" \"Y\" \"Y\" ...\n $ bicycle   : chr  \"N\" NA NA NA ...\n $ packsaddle: chr  \"N\" NA NA NA ...\n $ atv       : chr  \"N\" NA NA NA ...\n $ motorcycle: chr  \"N\" NA NA NA ...\n $ ohvover50i: chr  \"N\" NA NA NA ...\n $ snowshoe  : chr  \"N\" NA NA NA ...\n $ crosscount: chr  \"N\" NA NA NA ...\n $ dogsled   : chr  \"N\" NA NA NA ...\n $ snowmobile: chr  \"N\" NA NA NA ...\n $ nonmotoriz: chr  NA NA NA NA ...\n $ motorizedw: chr  NA NA NA NA ...\n $ primarytra: chr  \"NPS\" \"FS\" \"FS\" \"FS\" ...\n $ nationaltr: chr  NA NA NA NA ...\n $ lengthmile: num  6.5384 0.124 0.544 0.2844 0.0493 ...\n $ networklen: num  10.83 2.46 128.35 128.35 128.35 ...\n $ SHAPE_Leng: num  NA NA NA NA NA NA NA NA NA NA ...\n $ ObjectID  : int  1 2 3 4 5 6 7 8 9 10 ...\n $ geometry  :sfc_MULTILINESTRING of length 5910; first list element: List of 1\n  ..$ : num [1:170, 1:2] -111 -111 -111 -111 -111 ...\n  ..- attr(*, \"class\")= chr [1:3] \"XY\" \"MULTILINESTRING\" \"sfg\"\n - attr(*, \"sf_column\")= chr \"geometry\"\n - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA NA NA NA NA NA NA NA NA ...\n  ..- attr(*, \"names\")= chr [1:29] \"permanenti\" \"name\" \"namealtern\" \"trailnumbe\" ...",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-30",
    "href": "lectures/Lecture06.html#section-30",
    "title": "Lecture 06",
    "section": "",
    "text": "Filter using dplyr\nsf just works so well with tidyverse, you don’t need to think too hard about the programming aspect, instead, be the researcher/cartographer/data scientist etc.\n\nYellowstone &lt;- WY_TRAIL %&gt;% filter(sourcefeat == \"Yellowstone National Park\")\n\nObtain a basemap that fits the map we have extracted\n\nbasemap &lt;- get_tiles(Yellowstone, provider = \"OpenStreetMap\")",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-31",
    "href": "lectures/Lecture06.html#section-31",
    "title": "Lecture 06",
    "section": "",
    "text": "Put it all together\n\nggplot(data = Yellowstone) +\n  geom_spatraster_rgb(data = basemap) +\n  geom_sf() + \n  labs(title = \"Yellowstone Trails\") +\n  theme(legend.position = \"none\")",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-32",
    "href": "lectures/Lecture06.html#section-32",
    "title": "Lecture 06",
    "section": "",
    "text": "Point with addresses only\nGeocoding means providing geographical coordinates corresponding to a location.\nExample: I have a file of In n Out locations with no lat/lon:\n\nlibrary(dplyr, warn.conflicts = FALSE)\n\ninnout &lt;- read_csv(\"https://raw.githubusercontent.com/lewv/S24STATS101A/main/data/in_n_out.csv\")\nhead(innout)\n\n# A tibble: 6 × 5\n  name                      address               city      state   zip\n  &lt;chr&gt;                     &lt;chr&gt;                 &lt;chr&gt;     &lt;chr&gt; &lt;dbl&gt;\n1 IRVINE                    4115 CAMPUS DRIVE     IRVINE    CA    92612\n2 CARLSBAD                  5950 AVENIDA ENCINAS  CARLSBAD  CA    92008\n3 ORANGE (TUSTIN & LINCOLN) 2585 N. TUSTIN ST.    ORANGE    CA    92865\n4 MURRIETA                  39697 AVENIDA ACACIAS MURRIETA  CA    92563\n5 CORONA (AUTO CENTER DR.)  450 AUTO CENTER DR.   CORONA    CA    92882\n6 VACAVILLE                 170 NUT TREE PKWY     VACAVILLE CA    95687",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-33",
    "href": "lectures/Lecture06.html#section-33",
    "title": "Lecture 06",
    "section": "",
    "text": "Check",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-34",
    "href": "lectures/Lecture06.html#section-34",
    "title": "Lecture 06",
    "section": "",
    "text": "Geocoding preparation\nWe are using the package “tidygeocoder” here which is free but imperfect.\nIf we were doing this for a high stakes project, we might use Google as our geocoder.\nIn either case, the method is the same, the addresses must be prepared\n\nlibrary(tidygeocoder)\n\ninnout &lt;-innout %&gt;% filter(state == \"CA\"  & substr(innout$zip, 1, 3) &lt; 919 & zip != 91761)\ninnout &lt;- innout %&gt;% mutate(address2 = paste(innout$address, innout$city, innout$state, innout$zip, sep =\", \"))\n\nhead(innout)\n\n# A tibble: 6 × 6\n  name                        address                 city          state   zip address2                                       \n  &lt;chr&gt;                       &lt;chr&gt;                   &lt;chr&gt;         &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;                                          \n1 COVINA                      1371 GRAND AVE.         COVINA        CA    91724 1371 GRAND AVE., COVINA, CA, 91724             \n2 WESTCHESTER                 9149 S. SEPULVEDA BLVD. LOS ANGELES   CA    90045 9149 S. SEPULVEDA BLVD., LOS ANGELES, CA, 90045\n3 REDONDO BEACH               3801 INGLEWOOD AVE      REDONDO BEACH CA    90278 3801 INGLEWOOD AVE, REDONDO BEACH, CA, 90278   \n4 TORRANCE (CARSON ST.)       730 W. CARSON           TORRANCE      CA    90502 730 W. CARSON, TORRANCE, CA, 90502             \n5 PORTER RANCH                19901 RINALDI STREET    PORTER RANCH  CA    91326 19901 RINALDI STREET, PORTER RANCH, CA, 91326  \n6 GLENDALE (BRAND & BROADWAY) 119 S. BRAND BLVD.      GLENDALE      CA    91204 119 S. BRAND BLVD., GLENDALE, CA, 91204",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-35",
    "href": "lectures/Lecture06.html#section-35",
    "title": "Lecture 06",
    "section": "",
    "text": "Geocoding\nThe addresses are passed to a geocoding service\n\ninnout_lat_longs &lt;- innout %&gt;%\n  geocode(address2, method = 'osm', lat = latitude , long = longitude)\ninnout_lat_longs &lt;- innout_lat_longs %&gt;% na.omit()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\naddress\ncity\nstate\nzip\naddress2\nlatitude\nlongitude\n\n\n\n\nCOVINA\n1371 GRAND AVE.\nCOVINA\nCA\n91724\n1371 GRAND AVE., COVINA, CA, 91724\n34.06338\n-117.8684\n\n\nWESTCHESTER\n9149 S. SEPULVEDA BLVD.\nLOS ANGELES\nCA\n90045\n9149 S. SEPULVEDA BLVD., LOS ANGELES, CA, 90045\n33.95371\n-118.3968\n\n\nREDONDO BEACH\n3801 INGLEWOOD AVE\nREDONDO BEACH\nCA\n90278\n3801 INGLEWOOD AVE, REDONDO BEACH, CA, 90278\n33.89210\n-118.3618\n\n\nTORRANCE (CARSON ST.)\n730 W. CARSON\nTORRANCE\nCA\n90502\n730 W. CARSON, TORRANCE, CA, 90502\n33.83114\n-118.2884\n\n\nPORTER RANCH\n19901 RINALDI STREET\nPORTER RANCH\nCA\n91326\n19901 RINALDI STREET, PORTER RANCH, CA, 91326\n34.27587\n-118.5680\n\n\nGLENDALE (BRAND & BROADWAY)\n119 S. BRAND BLVD.\nGLENDALE\nCA\n91204\n119 S. BRAND BLVD., GLENDALE, CA, 91204\n34.14558\n-118.2553",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-36",
    "href": "lectures/Lecture06.html#section-36",
    "title": "Lecture 06",
    "section": "",
    "text": "Result\nNow we can map it after we convert it to a spatial feature:\n\npoints_sf &lt;- st_as_sf(innout_lat_longs, \n                      coords = c(\"longitude\", \"latitude\"), \n                      crs = 4326,\n                      remove = FALSE)\n                      \nbasemap &lt;- get_tiles(points_sf, provider = \"OpenStreetMap\", zoom = 9)\n\nggplot(data = points_sf) +\n  geom_spatraster_rgb(data = basemap) +\n  geom_sf(data = points_sf, shape = 21, fill = \"red\", color = \"yellow\", size = 2) +\n  labs(title = \"Map of In N Out Locations\") +\n  coord_sf(xlim = c(-118.9, -117.5), ylim = c(33.6, 34.5)) + \n  theme_minimal()",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-37",
    "href": "lectures/Lecture06.html#section-37",
    "title": "Lecture 06",
    "section": "",
    "text": "GeoJSON files\n\nSaw one earlier (neighborhoods from the LA Times)\nGeoJSON is a format for geographic data using JSON (JavaScript Object Notation).\nDeveloped for internet use, GeoJSON is human readable, can be very large, can also contain data related to the spatial structures.\nIt is open standard format and used heavily in web applications",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-38",
    "href": "lectures/Lecture06.html#section-38",
    "title": "Lecture 06",
    "section": "",
    "text": "Point example\n\nschools &lt;- st_read(\"../../../Schools_Colleges_and_Universities.geojson\")\n\nReading layer `Schools_Colleges_and_Universities' from data source `/Users/vivian/Desktop/SP24STATS422/Schools_Colleges_and_Universities.geojson' using driver `GeoJSON'\nSimple feature collection with 3214 features and 19 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 6305234 ymin: 1581822 xmax: 6652590 ymax: 2111962\nProjected CRS: NAD83 / California zone 5 (ftUS)\n\n\nProblem it is using a non-standard CRS. We convert:\n\nschools_wgs84 &lt;- st_transform(schools, st_crs(westside))  \nst_crs(schools_wgs84)\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-39",
    "href": "lectures/Lecture06.html#section-39",
    "title": "Lecture 06",
    "section": "",
    "text": "Now we can combine and plot\n\np &lt;- ggplot(westside) +\n  geom_sf(data = westside, aes(fill = as.factor(name))) +\n  geom_sf_text(aes(label = name)) +\n  geom_sf(data = schools_wgs84) +\n  coord_sf(xlim = c(westside_extent$xmin, westside_extent$xmax), \n           ylim = c(westside_extent$ymin, westside_extent$ymax),\n           expand = FALSE) +\n  theme(legend.position = \"none\")\n\np",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-40",
    "href": "lectures/Lecture06.html#section-40",
    "title": "Lecture 06",
    "section": "",
    "text": "Point in Polygon\nAn operation in which points from one spatial feature dataset are overlaid on the polygons of another spatial feature dataset to determine which points are contained within the polygons.\nIn our situation, we have schools and we have neighbors and cities. We will use a different shapefile for the County of LA\n\nst_layers(\"../../../County\")\n\nDriver: ESRI Shapefile \nAvailable layers:\n                                  layer_name geometry_type features fields                         crs_name\n1 City_and_Unincorporated_Boundaries_(Legal)       Polygon      347     16 NAD83 / California zone 5 (ftUS)",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-41",
    "href": "lectures/Lecture06.html#section-41",
    "title": "Lecture 06",
    "section": "",
    "text": "Reading the shapefile\n\ncounty &lt;- st_read(\"../../../County\", layer = \"City_and_Unincorporated_Boundaries_(Legal)\")\n\nReading layer `City_and_Unincorporated_Boundaries_(Legal)' from data source `/Users/vivian/Desktop/SP24STATS422/County' using driver `ESRI Shapefile'\nSimple feature collection with 347 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 6275509 ymin: 1385758 xmax: 6668481 ymax: 2122085\nProjected CRS: NAD83 / California zone 5 (ftUS)",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-42",
    "href": "lectures/Lecture06.html#section-42",
    "title": "Lecture 06",
    "section": "",
    "text": "Matching CRS\nThe CRS for the county map is not the same as the schools, so we can transform one of them. Always check too.\n\ncounty_wgs84 &lt;- st_transform(county, st_crs(schools_wgs84))  \nst_crs(county_wgs84)\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-43",
    "href": "lectures/Lecture06.html#section-43",
    "title": "Lecture 06",
    "section": "",
    "text": "Finding the points in polygon\n\nThe function st_intersects will overly the schools on the county map and the intersections are noted.\nUsing lengths() from base R, we just measure the length of the vectors\nI chose to log() transform the counts\nLastly, them back to the polygons\n\n\nintersections &lt;- st_intersects(county_wgs84, schools_wgs84)\npoint_counts &lt;- lengths(intersections)\ncounty_wgs84$point_count &lt;- log(point_counts+1)",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-44",
    "href": "lectures/Lecture06.html#section-44",
    "title": "Lecture 06",
    "section": "",
    "text": "(Choropleth) Map the result\nThe only trick is the aesthetic where fill = point_count\n\nggplot(county_wgs84) +\n  geom_sf(aes(fill = point_count)) +  # Fill based on point counts\n  coord_sf(xlim = c(-119, -117.6), \n           ylim = c(33.68, 34.8),\n           expand = FALSE) +\n  scale_fill_viridis_b()",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-45",
    "href": "lectures/Lecture06.html#section-45",
    "title": "Lecture 06",
    "section": "",
    "text": "Definition\n\nA choropleth map is a thematic map in which areas are shaded or patterned in proportion to the measurement of the statistical variable being displayed\nProvides easy visualization of measurement variation across a geographic area\nTypically uses administrative boundaries like countries, states, counties, or districts.\nTypically darker shades often represent higher values, and lighter shades represent lower values.\nThe data should be standardized (adjusted for the size of the population or area).",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-46",
    "href": "lectures/Lecture06.html#section-46",
    "title": "Lecture 06",
    "section": "",
    "text": "Reading the shapefile: US Counties\n\nUS_COUNTY &lt;- st_read(\"../../../cb_2018_us_county_20m\", layer = \"cb_2018_us_county_20m\")\n\nReading layer `cb_2018_us_county_20m' from data source `/Users/vivian/Desktop/SP24STATS422/cb_2018_us_county_20m' using driver `ESRI Shapefile'\nSimple feature collection with 3220 features and 9 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -179.1743 ymin: 17.91377 xmax: 179.7739 ymax: 71.35256\nGeodetic CRS:  NAD83",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-47",
    "href": "lectures/Lecture06.html#section-47",
    "title": "Lecture 06",
    "section": "",
    "text": "Check the map\n\nggplot(data = US_COUNTY) +\n  geom_sf(color = \"black\", fill = \"white\") + \n  coord_sf(xlim = c(-172.791110603, -66.96466), ylim = c(18.91619, 71.3577635769)) + \n  labs(title = \"US County Map\") +\n  theme(legend.position = \"none\")",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-48",
    "href": "lectures/Lecture06.html#section-48",
    "title": "Lecture 06",
    "section": "",
    "text": "Obtain Data & Join\nSpatial Data using sf creates simple data frame type of spatial data\nSo it handles the same way\n\npoverty &lt;- read_csv(\"https://raw.githubusercontent.com/lewv/S24STATS101A/main/data/poverty_us_2022.csv\")  \nCOUNTY_pov &lt;- inner_join(US_COUNTY, poverty)",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-49",
    "href": "lectures/Lecture06.html#section-49",
    "title": "Lecture 06",
    "section": "",
    "text": "Map to a ggplot object\nSave your ggplot for further processing\n\np &lt;- ggplot(data = COUNTY_pov) +\n  geom_sf(aes(fill = Pct_Below_Poverty)) + \n  coord_sf(xlim = c(-172.791110603, -66.96466), ylim = c(18.91619, 71.3577635769)) +\n  scale_fill_gradient2() +\n  labs(title = \"US County Poverty Map\", fill = \"% below poverty\") +\n  theme_classic()\np",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-50",
    "href": "lectures/Lecture06.html#section-50",
    "title": "Lecture 06",
    "section": "",
    "text": "Adding Interactivity\nUse the plotly library to add quick interactivity to your map:\n\nlibrary(plotly)\nggplotly(p, tooltip = c(\"fill\"))",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-51",
    "href": "lectures/Lecture06.html#section-51",
    "title": "Lecture 06",
    "section": "",
    "text": "About\nLeaflet is used for creating interactive maps. Many websites use it to create maps for reporting purposes. This document serves as an brief introduction to some of its features.\nThe package leaflet must be installed. We call it up with the library function. It is best to use the “pipe” operator |&gt; to pass data as the function calls can become quite complex.\nThe basic steps used in creating a map in leaflet:\n\nCreate a map widget by calling leaflet().\nAdd layers to the map by using layer functions to modify the map widget.\nRepeat step 2 as many times as you like\nPrint the map widget to display it.",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-52",
    "href": "lectures/Lecture06.html#section-52",
    "title": "Lecture 06",
    "section": "",
    "text": "Basic Map\nHere is a very basic map centered on the Stat Department. m is the map widget. We use addTiles() to add a base map then we use addMarkers to identify UCLA. Then we print the map.\n\n#library(leaflet)\nm &lt;- leaflet() |&gt;\n  addTiles() |&gt;\n  addMarkers(lng = -118.442506,\n             lat = 34.069649,\n             popup = \"UCLA\")\nm  # Print the map",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-53",
    "href": "lectures/Lecture06.html#section-53",
    "title": "Lecture 06",
    "section": "",
    "text": "Map libraries in R - State\nWe can incorporate the maps library available in R. We can overlay a map of the United States. We extract the US map and save it to a new object called mapStates. A new map widget is created and the state boundaries are shaded.\n\n#library(maps)\nmapStates &lt;- map(\"state\", fill = TRUE, plot = FALSE)\nleaflet(data = mapStates) |&gt;\n  addTiles() |&gt;\n  addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-54",
    "href": "lectures/Lecture06.html#section-54",
    "title": "Lecture 06",
    "section": "",
    "text": "Map libraries in R - County\n\nmapCounties &lt;- map(\"county\", fill = TRUE, plot = FALSE)\nleaflet(data = mapCounties) |&gt;\n  addTiles() |&gt;\n  addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-55",
    "href": "lectures/Lecture06.html#section-55",
    "title": "Lecture 06",
    "section": "",
    "text": "Other Places\nJust to show you that we can map other nations.\n\nmapCyprus &lt;- map(\"world\", \"cyprus\", fill = TRUE, plot = FALSE)\nleaflet(data = mapCyprus) |&gt;\n  addTiles() |&gt;\n  addMarkers(lng = 33.370985, 35.174318, popup = \"Famagusta Gate\")",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture06.html#section-56",
    "href": "lectures/Lecture06.html#section-56",
    "title": "Lecture 06",
    "section": "",
    "text": "Easy Basemaps\nWe have more choices for a basemap. You can use addWMSTiles() to add WMS (Web Map Service) tiles. The map below shows the Base Reflectivity (a measure of the intensity of precipitation) using the WMS from the Iowa Environmental Mesonet:\n\nleaflet() |&gt;\n  addTiles() |&gt;\n  setView(lng = -98.5795,\n          lat = 39.8282,\n          zoom = 4) |&gt;\n  addWMSTiles(\n    \"http://mesonet.agron.iastate.edu/cgi-bin/wms/nexrad/n0r.cgi\",\n    layers = \"nexrad-n0r-900913\",\n    options = WMSTileOptions(format = \"image/png\", transparent = TRUE),\n    attribution = \"Weather data © 2012 IEM Nexrad\"\n  )\n\n\n\n\n\nThe weather map is current but would be updated every time we access the weather web site.",
    "crumbs": [
      "Lectures",
      "Lecture 06 Maps"
    ]
  },
  {
    "objectID": "lectures/Lecture03python.html#introduction",
    "href": "lectures/Lecture03python.html#introduction",
    "title": "Plotting in Python",
    "section": "Introduction",
    "text": "Introduction\n\nI have met my second former student who lives by a “rule of two” so it is time to share.\nBoth are quite successful, I’ll share their rule:\n\nMaster two skills, one skill focused on data and the other skill focused on analysis / statistics.\n\nThe first person, says: “pandas and numpy”\nThe second person will present on Data Viz in business next month says “dplyr and ggplot”",
    "crumbs": [
      "Lectures",
      "Lecture 03 Python"
    ]
  },
  {
    "objectID": "lectures/Lecture03python.html#section",
    "href": "lectures/Lecture03python.html#section",
    "title": "Plotting in Python",
    "section": "",
    "text": "Python\n\nHas &gt; 135K libraries\nWe will be using Pandas, Numpy, Matplotlib\nalso Seaborn\nNot meant to be comprehensive but instead helping you to narrow it down to “two”.",
    "crumbs": [
      "Lectures",
      "Lecture 03 Python"
    ]
  },
  {
    "objectID": "lectures/Lecture03python.html#section-1",
    "href": "lectures/Lecture03python.html#section-1",
    "title": "Plotting in Python",
    "section": "",
    "text": "The stats on Pandas, Numpy, Matplotlib & Seaborn\n\nDevelopers Pandas maybe &lt; 100 core and thousands of contributors/followers\nDevelopers Numpy maybe &lt; 50 core and a bit more than 1000 contributors/followers\nDevelopers Matplotlib maybe &lt; 40 core and &lt; 1000 contributors/followers\nDevelopers Seaborn like one core developer and maybe 50 contributors",
    "crumbs": [
      "Lectures",
      "Lecture 03 Python"
    ]
  },
  {
    "objectID": "lectures/Lecture03python.html#section-2",
    "href": "lectures/Lecture03python.html#section-2",
    "title": "Plotting in Python",
    "section": "",
    "text": "The Setup\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom plotnine import *\nfrom plotnine.data import mtcars",
    "crumbs": [
      "Lectures",
      "Lecture 03 Python"
    ]
  },
  {
    "objectID": "lectures/Lecture03python.html#section-3",
    "href": "lectures/Lecture03python.html#section-3",
    "title": "Plotting in Python",
    "section": "",
    "text": "Pandas origins and logic\n\nThe name “Pandas” comes from “Panel Data,” a social science term for data that include observations over multiple time periods for the same individuals—or panels.\nPandas core data structure is the DataFrame it is designed to handle and analyze structured data easily.\nA DataFrame is just a table of data organized into rows and columns. Like an R data frame, a spreadsheet or a SQL table.",
    "crumbs": [
      "Lectures",
      "Lecture 03 Python"
    ]
  },
  {
    "objectID": "lectures/Lecture03python.html#section-4",
    "href": "lectures/Lecture03python.html#section-4",
    "title": "Plotting in Python",
    "section": "",
    "text": "Basic Example\n\nLike R, we can read csv (and many others)\npd calls up pandas and read_csv() is the specific function from pandas used to read csv files\nThe dataset can reside on the web\nIt is wise (not required) to specify an index column when we have (1) time series data or (2) unique IDs.\nThis makes grouping, lookups, joins faster and easier",
    "crumbs": [
      "Lectures",
      "Lecture 03 Python"
    ]
  },
  {
    "objectID": "lectures/Lecture03python.html#section-5",
    "href": "lectures/Lecture03python.html#section-5",
    "title": "Plotting in Python",
    "section": "",
    "text": "Basic Example Code for AAPL\n\nAAPL = pd.read_csv('https://raw.githubusercontent.com/lewv/S24STATS101A/main/data/AAPL.csv', index_col='Date', parse_dates=True) # function read_csv() from pandas\n\nAAPL.head(3) #.head() is a method",
    "crumbs": [
      "Lectures",
      "Lecture 03 Python"
    ]
  },
  {
    "objectID": "lectures/Lecture03python.html#section-6",
    "href": "lectures/Lecture03python.html#section-6",
    "title": "Plotting in Python",
    "section": "",
    "text": "Basic Example Result\n\n\n\n\n\n\n\n\n\n\nOpen\nHigh\nLow\nClose\nAdj Close\nVolume\n\n\nDate\n\n\n\n\n\n\n\n\n\n\n2019-01-02\n38.722500\n39.712502\n38.557499\n39.480000\n37.845039\n148158800\n\n\n2019-01-03\n35.994999\n36.430000\n35.500000\n35.547501\n34.075397\n365248800\n\n\n2019-01-04\n36.132500\n37.137501\n35.950001\n37.064999\n35.530060\n234428400",
    "crumbs": [
      "Lectures",
      "Lecture 03 Python"
    ]
  },
  {
    "objectID": "lectures/Lecture03python.html#section-7",
    "href": "lectures/Lecture03python.html#section-7",
    "title": "Plotting in Python",
    "section": "",
    "text": "Basic Example Code for Ikea\n\nikea = pd.read_csv('https://raw.githubusercontent.com/lewv/S24STATS101A/main/data/ikea.csv', \nindex_col='item_id') \n\nikea.head(3)",
    "crumbs": [
      "Lectures",
      "Lecture 03 Python"
    ]
  },
  {
    "objectID": "lectures/Lecture03python.html#section-8",
    "href": "lectures/Lecture03python.html#section-8",
    "title": "Plotting in Python",
    "section": "",
    "text": "Ikea data\n\n\n\n\n\n\n\n\n\n\nUnnamed: 0\nname\ncategory\nprice\nold_price\nsellable_online\nlink\nother_colors\nshort_description\ndesigner\ndepth\nheight\nwidth\n\n\nitem_id\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n90420332\n0\nFREKVENS\nBar furniture\n265.0\nNo old price\nTrue\nhttps://www.ikea.com/sa/en/p/frekvens-bar-tabl...\nNo\nBar table, in/outdoor, 51x51 cm\nNicholai Wiig Hansen\nNaN\n99.0\n51.0\n\n\n368814\n1\nNORDVIKEN\nBar furniture\n995.0\nNo old price\nFalse\nhttps://www.ikea.com/sa/en/p/nordviken-bar-tab...\nNo\nBar table, 140x80 cm\nFrancis Cayouette\nNaN\n105.0\n80.0\n\n\n9333523\n2\nNORDVIKEN / NORDVIKEN\nBar furniture\n2095.0\nNo old price\nFalse\nhttps://www.ikea.com/sa/en/p/nordviken-nordvik...\nNo\nBar table and 4 bar stools\nFrancis Cayouette\nNaN\nNaN\nNaN",
    "crumbs": [
      "Lectures",
      "Lecture 03 Python"
    ]
  },
  {
    "objectID": "lectures/Lecture03python.html#section-9",
    "href": "lectures/Lecture03python.html#section-9",
    "title": "Plotting in Python",
    "section": "",
    "text": "Aside: classes, objects, functions, methods\n\nPython is OOP, R is functional programming language.\nA Pandas DataFrame in the abstract is a “class”\nThe Python objects AAPL and ikea are Pandas DataFrame realized or an instance of the Pandas DataFrame class.\nMethods are defined within a class’s definition and are associated with specific objects.\nFunctions can be defined independently of classes and are not necessarily associated with any objects.",
    "crumbs": [
      "Lectures",
      "Lecture 03 Python"
    ]
  },
  {
    "objectID": "lectures/Lecture03python.html#section-10",
    "href": "lectures/Lecture03python.html#section-10",
    "title": "Plotting in Python",
    "section": "",
    "text": "Basic Plot Using Matplotlib pyplot",
    "crumbs": [
      "Lectures",
      "Lecture 03 Python"
    ]
  },
  {
    "objectID": "lectures/Lecture03python.html#section-11",
    "href": "lectures/Lecture03python.html#section-11",
    "title": "Plotting in Python",
    "section": "",
    "text": "CODE: Basic Plot with Matplotlib pyplot\nIf you are using Jupyter, you don’t need plt.show();, but here (using Quarto chunks) I do. If you are generating simple graphics.\n\nplt.plot(AAPL.index, AAPL.Open)\nplt.title(r'AAPL since 1/2019', fontsize=20)\nplt.xlabel('Date')\nplt.ylabel('Open (USD)')\n\nplt.show();",
    "crumbs": [
      "Lectures",
      "Lecture 03 Python"
    ]
  },
  {
    "objectID": "lectures/Lecture03python.html#section-12",
    "href": "lectures/Lecture03python.html#section-12",
    "title": "Plotting in Python",
    "section": "",
    "text": "Basic Scatterplot modify color and marker",
    "crumbs": [
      "Lectures",
      "Lecture 03 Python"
    ]
  },
  {
    "objectID": "lectures/Lecture03python.html#section-13",
    "href": "lectures/Lecture03python.html#section-13",
    "title": "Plotting in Python",
    "section": "",
    "text": "CODE: Basic Scatterplot modify color and marker\n\ncolor = np.log(ikea.price)\n\nplt.scatter(x = ikea.height, y = ikea.width, \nc=color, marker='.', alpha=0.5)\n\nplt.title(r'Ikea Product Height & Width', fontsize=20)\nplt.xlabel('Height (cm)')\nplt.ylabel('Width (cm)')\n\nplt.show();",
    "crumbs": [
      "Lectures",
      "Lecture 03 Python"
    ]
  },
  {
    "objectID": "lectures/Lecture03python.html#section-14",
    "href": "lectures/Lecture03python.html#section-14",
    "title": "Plotting in Python",
    "section": "",
    "text": "Basic Plot make it a line",
    "crumbs": [
      "Lectures",
      "Lecture 03 Python"
    ]
  },
  {
    "objectID": "lectures/Lecture03python.html#section-15",
    "href": "lectures/Lecture03python.html#section-15",
    "title": "Plotting in Python",
    "section": "",
    "text": "CODE Basic Plot make it a line\n\nplt.plot(AAPL.index, \n          AAPL.Open, \n          color='purple', \n          linestyle='-', \n          linewidth=0.5)\n\nplt.title(r'AAPL since 1/2019', fontsize=20)\nplt.xlabel('Date')\nplt.ylabel('Open (USD)')\n\nplt.show();",
    "crumbs": [
      "Lectures",
      "Lecture 03 Python"
    ]
  },
  {
    "objectID": "lectures/Lecture03python.html#section-16",
    "href": "lectures/Lecture03python.html#section-16",
    "title": "Plotting in Python",
    "section": "",
    "text": "Or many lines",
    "crumbs": [
      "Lectures",
      "Lecture 03 Python"
    ]
  },
  {
    "objectID": "lectures/Lecture03python.html#section-17",
    "href": "lectures/Lecture03python.html#section-17",
    "title": "Plotting in Python",
    "section": "",
    "text": "CODE Or Many Lines\n\nplt.plot(AAPL.index, AAPL.Open, color='purple',\nlinestyle='-', linewidth=0.25, label='Open')\n\nplt.plot(AAPL.index, AAPL.Close, color='blue', linestyle='-', linewidth=0.25, label='Close')\n\nplt.plot(AAPL.index, AAPL.High, color='green', linestyle='-', linewidth=0.25, label='High')\n\nplt.plot(AAPL.index, AAPL.Low, color='red', linestyle='-', linewidth=0.25, label='Low')\n\nplt.legend()\n\nplt.title(r'AAPL Open/Close/High/Low ', fontsize=20)\nplt.xlabel('Date')\nplt.ylabel('US Dollars')\n\nplt.show();",
    "crumbs": [
      "Lectures",
      "Lecture 03 Python"
    ]
  },
  {
    "objectID": "lectures/Lecture03python.html#section-18",
    "href": "lectures/Lecture03python.html#section-18",
    "title": "Plotting in Python",
    "section": "",
    "text": "Histogram",
    "crumbs": [
      "Lectures",
      "Lecture 03 Python"
    ]
  },
  {
    "objectID": "lectures/Lecture03python.html#section-19",
    "href": "lectures/Lecture03python.html#section-19",
    "title": "Plotting in Python",
    "section": "",
    "text": "Code: Histogram\n\nn_bins = 30\n\nplt.hist(AAPL.Close, bins = n_bins)\n\nplt.title(r'AAPL Close (USD) histogram', fontsize=20)\nplt.xlabel('Close (USD)')\nplt.ylabel('Frequency')\nplt.show();",
    "crumbs": [
      "Lectures",
      "Lecture 03 Python"
    ]
  },
  {
    "objectID": "lectures/Lecture03python.html#section-20",
    "href": "lectures/Lecture03python.html#section-20",
    "title": "Plotting in Python",
    "section": "",
    "text": "Histogram - density",
    "crumbs": [
      "Lectures",
      "Lecture 03 Python"
    ]
  },
  {
    "objectID": "lectures/Lecture03python.html#section-21",
    "href": "lectures/Lecture03python.html#section-21",
    "title": "Plotting in Python",
    "section": "",
    "text": "Code: Histogram - density\n\nn_bins = 30\n\nplt.hist(AAPL.Close, density = True, bins = n_bins)\n\nplt.title(r'AAPL Close (USD) density', fontsize=20)\nplt.xlabel('Close (USD)')\nplt.ylabel('Density')\n\nplt.show();",
    "crumbs": [
      "Lectures",
      "Lecture 03 Python"
    ]
  },
  {
    "objectID": "lectures/Lecture03python.html#section-22",
    "href": "lectures/Lecture03python.html#section-22",
    "title": "Plotting in Python",
    "section": "",
    "text": "Matplotlib, Pandas, Seaborn\n\nYou will always need Matplotlib\nBut Matplotlib is not as well suited for statistical graphics (not the “core” mission)\nContrast Seaborn is all about statistical graphics\nPandas is all about data, has some statistical graphic capability but it is much more widely supported than Seaborn",
    "crumbs": [
      "Lectures",
      "Lecture 03 Python"
    ]
  },
  {
    "objectID": "lectures/Lecture03python.html#section-23",
    "href": "lectures/Lecture03python.html#section-23",
    "title": "Plotting in Python",
    "section": "",
    "text": "Some Comparisons - Pandas\n\nIntegrates graphics with its dataframes well so it is quicker to learn to use and remember.\nDoes not allow a lot of customization, faceting would be easier with Seaborn for example\nBut its basic plots not as visually appealing",
    "crumbs": [
      "Lectures",
      "Lecture 03 Python"
    ]
  },
  {
    "objectID": "lectures/Lecture03python.html#section-24",
    "href": "lectures/Lecture03python.html#section-24",
    "title": "Plotting in Python",
    "section": "",
    "text": "Some Comparisons - Seaborn\n\nDesigned for statistical graphics\nBasic plots are more appealing than Pandas\nEasier to facet\nHas more complicated options than Pandas",
    "crumbs": [
      "Lectures",
      "Lecture 03 Python"
    ]
  },
  {
    "objectID": "lectures/Lecture03python.html#section-25",
    "href": "lectures/Lecture03python.html#section-25",
    "title": "Plotting in Python",
    "section": "",
    "text": "Some Comparisons - Matplotlib\n\nRequires a lot of effort to make a simple statistical plot\nBut offers maximum customization\nThe primary foundation for all graphics in Python\nBasic visual appeal not as nice as Seaborn but can be customized to be nicer (with much more work)",
    "crumbs": [
      "Lectures",
      "Lecture 03 Python"
    ]
  },
  {
    "objectID": "lectures/Lecture03python.html#section-26",
    "href": "lectures/Lecture03python.html#section-26",
    "title": "Plotting in Python",
    "section": "",
    "text": "Basic Boxplot in pandas",
    "crumbs": [
      "Lectures",
      "Lecture 03 Python"
    ]
  },
  {
    "objectID": "lectures/Lecture03python.html#section-27",
    "href": "lectures/Lecture03python.html#section-27",
    "title": "Plotting in Python",
    "section": "",
    "text": "Code: Basic Boxplot in pandas\n\n# Create a boxplot\nikea.boxplot(column=\"price\", by=\"category\", figsize=(14, 6))\n\n# Set titles and labels using Matplotlib\nplt.xlabel('Category')\nplt.xticks(rotation = 45, fontsize = 7, ha = 'right')\nplt.ylabel('Price')\nplt.title('Comparison of Price Across Category')\n\nplt.show();",
    "crumbs": [
      "Lectures",
      "Lecture 03 Python"
    ]
  },
  {
    "objectID": "lectures/Lecture03python.html#section-28",
    "href": "lectures/Lecture03python.html#section-28",
    "title": "Plotting in Python",
    "section": "",
    "text": "Basic Boxplot in seaborn",
    "crumbs": [
      "Lectures",
      "Lecture 03 Python"
    ]
  },
  {
    "objectID": "lectures/Lecture03python.html#section-29",
    "href": "lectures/Lecture03python.html#section-29",
    "title": "Plotting in Python",
    "section": "",
    "text": "Code: Basic Boxplot in seaborn\n\n# adjust figure size\nplt.figure(figsize=(14, 6))\n\n# Create a boxplot\nsns.boxplot(x='category', y='price', hue='category', data = ikea)\n\n# Set titles and labels using Matplotlib\nplt.xlabel('Category')\nplt.xticks(rotation = 45, fontsize = 7, ha = 'right')\nplt.ylabel('Price')\nplt.title('Comparison of Price Across Category')\n\nplt.show();",
    "crumbs": [
      "Lectures",
      "Lecture 03 Python"
    ]
  },
  {
    "objectID": "lectures/Lecture03python.html#section-30",
    "href": "lectures/Lecture03python.html#section-30",
    "title": "Plotting in Python",
    "section": "",
    "text": "Faceting\n\nHelps Exploration\nComparisons made easier\nClarity (can reduce overplotting)\nNot specific to one industry/field",
    "crumbs": [
      "Lectures",
      "Lecture 03 Python"
    ]
  },
  {
    "objectID": "lectures/Lecture03python.html#section-31",
    "href": "lectures/Lecture03python.html#section-31",
    "title": "Plotting in Python",
    "section": "",
    "text": "Faceting Boxplots in seaborn",
    "crumbs": [
      "Lectures",
      "Lecture 03 Python"
    ]
  },
  {
    "objectID": "lectures/Lecture03python.html#section-32",
    "href": "lectures/Lecture03python.html#section-32",
    "title": "Plotting in Python",
    "section": "",
    "text": "Faceting Boxplots with Seaborn\n\ntop_categories = ikea['category'].unique()[:4]\n\nnew_data = ikea[ikea['category'].isin(top_categories)]\n\ng = sns.catplot(x='category', y='price', hue = 'category',\ncol='sellable_online',\n                data=new_data, kind='box',\n                height=4, aspect=1.5)\n\ng.set_xticklabels(rotation=45, ha = 'right')\n\nplt.show()",
    "crumbs": [
      "Lectures",
      "Lecture 03 Python"
    ]
  },
  {
    "objectID": "lectures/Lecture03python.html#section-33",
    "href": "lectures/Lecture03python.html#section-33",
    "title": "Plotting in Python",
    "section": "",
    "text": "Notes on Faceting\n\nIn Pandas and in Matplotlib, faceting would require first creating subplots (one for each facet)\nThen process the categories in each facet, so in the Ikea example we would filter the DataFrame for a category, and then plotting the category in its designated subplot.\nIf you were to avoid Seaborn, choose Matplotlib over Pandas",
    "crumbs": [
      "Lectures",
      "Lecture 03 Python"
    ]
  },
  {
    "objectID": "lectures/Lecture03python.html#section-34",
    "href": "lectures/Lecture03python.html#section-34",
    "title": "Plotting in Python",
    "section": "",
    "text": "Just curious\nI asked ChatGPT how to facet the Pandas boxplot. Here is its response. Suppose we had regions in the Ikea data:\n\n# Unique regions to facet by\nregions = ikea['region'].unique()\n\n# Create a figure with a subplot for each region\nfig, axes = plt.subplots(nrows=1, ncols=len(regions), figsize=(5 * len(regions), 5), sharey=True)\n\n# Loop over each region and create a boxplot in the corresponding subplot\nfor ax, region in zip(axes, regions):\n    subset = ikea[ikea['region'] == region]\n    subset.boxplot(column='price', by='category', ax=ax)\n    ax.set_title(f'Region: {region}')\n    ax.set_xlabel('Category')\n    ax.set_ylabel('Price')\n    ax.tick_params(axis='x', rotation=45)  # Optional: Rotate x-axis labels for clarity\n\n# Adjust layout and display the plot\nplt.tight_layout()\nplt.suptitle('Price Distribution by Category and Region')  # Set the overall title\nplt.subplots_adjust(top=0.85)  # Adjust the top margin to fit the suptitle\nplt.show()",
    "crumbs": [
      "Lectures",
      "Lecture 03 Python"
    ]
  },
  {
    "objectID": "lectures/Lecture03python.html#section-35",
    "href": "lectures/Lecture03python.html#section-35",
    "title": "Plotting in Python",
    "section": "",
    "text": "More faceting with Seaborn",
    "crumbs": [
      "Lectures",
      "Lecture 03 Python"
    ]
  },
  {
    "objectID": "lectures/Lecture03python.html#section-36",
    "href": "lectures/Lecture03python.html#section-36",
    "title": "Plotting in Python",
    "section": "",
    "text": "Code: More faceting with Seaborn\n\n# FacetGrid in Seaborn\n\ng = sns.FacetGrid(data=ikea, col= 'other_colors', height=4, aspect=1.5)\ng.map(plt.hist, \"price\", bins=20, color='b')\n\nplt.show()",
    "crumbs": [
      "Lectures",
      "Lecture 03 Python"
    ]
  },
  {
    "objectID": "lectures/Lecture03python.html#section-37",
    "href": "lectures/Lecture03python.html#section-37",
    "title": "Plotting in Python",
    "section": "",
    "text": "Plotnine\n\nhttps://plotnine.org/\nggplot in Python\nabout 100 developers and about 200 contributors\nstill very new (about a year ago) with many issues (e.g., interacting with Matplotlib)",
    "crumbs": [
      "Lectures",
      "Lecture 03 Python"
    ]
  },
  {
    "objectID": "lectures/Lecture03python.html#section-38",
    "href": "lectures/Lecture03python.html#section-38",
    "title": "Plotting in Python",
    "section": "",
    "text": "ggplot in Python with plotnine",
    "crumbs": [
      "Lectures",
      "Lecture 03 Python"
    ]
  },
  {
    "objectID": "lectures/Lecture03python.html#section-39",
    "href": "lectures/Lecture03python.html#section-39",
    "title": "Plotting in Python",
    "section": "",
    "text": "Code: ggplot in Python with plotnine\n\n(\n    ggplot(mtcars, aes(\"wt\", \"mpg\", color=\"factor(gear)\"))\n    + geom_point()\n    + stat_smooth(method=\"lm\")\n    + facet_wrap(\"gear\")\n    + theme_tufte()\n)",
    "crumbs": [
      "Lectures",
      "Lecture 03 Python"
    ]
  },
  {
    "objectID": "example-page.html",
    "href": "example-page.html",
    "title": "Example page",
    "section": "",
    "text": "On this page, we set two options directly in the Quarto document. The rest of the options are coming from the _quarto.yml project file. These options are considered “global”.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to Statistics 422",
    "section": "",
    "text": "This site was produced with WebR and Quarto in RStudio and is currently hosted by GitHub. It was created for the students of Statistics & Data Science 422.\nTo learn more about Quarto websites please visit https://quarto.org/docs/websites.\nTo learn more about WebR please visit https://quarto-webr.thecoatlessprofessor.com/qwebr-first-steps.html.\nAnd this site is hosted by GitHub (free) and easy setup and maintenance https://pages.github.com/",
    "crumbs": [
      "Start Here",
      "Overview"
    ]
  },
  {
    "objectID": "projects/project-2.html",
    "href": "projects/project-2.html",
    "title": "project-2",
    "section": "",
    "text": "To be filled out soon",
    "crumbs": [
      "Projects",
      "Project 2 (report)"
    ]
  },
  {
    "objectID": "activity/Week03Python.html",
    "href": "activity/Week03Python.html",
    "title": "Python Activity",
    "section": "",
    "text": "This is the first time I have tried it publicly, please give me feedback if possible.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nIt doesn’t close it in this browser version of Python but it keeps your plots orderly.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease!\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Activities",
      "Lecture 3 Activity Python"
    ]
  },
  {
    "objectID": "activity/Week03Python.html#python-in-the-browser",
    "href": "activity/Week03Python.html#python-in-the-browser",
    "title": "Python Activity",
    "section": "",
    "text": "This is the first time I have tried it publicly, please give me feedback if possible.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nIt doesn’t close it in this browser version of Python but it keeps your plots orderly.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease!\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Activities",
      "Lecture 3 Activity Python"
    ]
  },
  {
    "objectID": "activity/Week03Python.html#load-libaries-that-are-not-automatically-loaded-by-pyodide",
    "href": "activity/Week03Python.html#load-libaries-that-are-not-automatically-loaded-by-pyodide",
    "title": "Python Activity",
    "section": "Load libaries that are not automatically loaded by Pyodide",
    "text": "Load libaries that are not automatically loaded by Pyodide\nIf you want a particular library, you can install it. The list of what is currently built in can be found here\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Activities",
      "Lecture 3 Activity Python"
    ]
  },
  {
    "objectID": "activity/Week03Python.html#try-using-seaborn",
    "href": "activity/Week03Python.html#try-using-seaborn",
    "title": "Python Activity",
    "section": "Try using Seaborn",
    "text": "Try using Seaborn\nSeaborn has it’s own version of iris. You can learn about Seaborn\n\nLineplot in Seaborn\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nClose the current plot (less confusing)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nBoxplot with Seaborn\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nClose the current plot (less confusing)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nAnother window for you\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Activities",
      "Lecture 3 Activity Python"
    ]
  },
  {
    "objectID": "activity/shiny_activity.html",
    "href": "activity/shiny_activity.html",
    "title": "Week 4 Shiny",
    "section": "",
    "text": "Please enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "activity/ggplot2.html",
    "href": "activity/ggplot2.html",
    "title": "ggplot part 2",
    "section": "",
    "text": "Please enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Activities",
      "Lecture 2 Activity"
    ]
  },
  {
    "objectID": "activity/ggplot2.html#loading-libraries",
    "href": "activity/ggplot2.html#loading-libraries",
    "title": "ggplot part 2",
    "section": "",
    "text": "Please enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Activities",
      "Lecture 2 Activity"
    ]
  },
  {
    "objectID": "activity/ggplot2.html#the-details-are-in-the-aes-mappings",
    "href": "activity/ggplot2.html#the-details-are-in-the-aes-mappings",
    "title": "ggplot part 2",
    "section": "the details are in the aes() mappings",
    "text": "the details are in the aes() mappings\n\nthe aes() values commonly seen are: color, fill, shape, group, linetype\ntypically only x and y are required (sometimes just x)\nhttps://ggplot2.tidyverse.org/reference/aes.html\nand there are countless options BUT the individual geoms may only understand some of them:\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nif we were to re-run it using geom_smooth and leaving everything else the same, we would see an error (but it would create our plot)",
    "crumbs": [
      "Activities",
      "Lecture 2 Activity"
    ]
  },
  {
    "objectID": "activity/ggplot2.html#example-read-some-data",
    "href": "activity/ggplot2.html#example-read-some-data",
    "title": "ggplot part 2",
    "section": "Example: Read some data",
    "text": "Example: Read some data\nTeams, you decide, if you are using this interface, you can use any dataset from tidyverse or tidytuesday or things like iris – otherwise, here are some\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Activities",
      "Lecture 2 Activity"
    ]
  },
  {
    "objectID": "activity/ggplot2.html#discover-their-content",
    "href": "activity/ggplot2.html#discover-their-content",
    "title": "ggplot part 2",
    "section": "Discover their content",
    "text": "Discover their content\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Activities",
      "Lecture 2 Activity"
    ]
  },
  {
    "objectID": "activity/ggplot2.html#basic-examination",
    "href": "activity/ggplot2.html#basic-examination",
    "title": "ggplot part 2",
    "section": "Basic examination",
    "text": "Basic examination\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Activities",
      "Lecture 2 Activity"
    ]
  },
  {
    "objectID": "activity/ggplot2.html#eda",
    "href": "activity/ggplot2.html#eda",
    "title": "ggplot part 2",
    "section": "EDA",
    "text": "EDA\nEDA (exploratory data analysis) is very visual and your excellent graphical skills will be useful.\nData Cleaning\nThere is none of that in our class (we will just delete), but missing values need a decision in your research (e.g., imputation, deletion).\nI will misuse summary() it’s handy (no need to load libraries)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nand it reveals the NAs and some heavily rounded statistics. If you need to use a mean else, do not rely on summary() this is for a quick look at the basic statistics only.\nOther things you can do\n\nBe sure each variable has been read as its correct type (numeric, non-numeric)\nAlways check for duplicates - they can mess up any analysis\nIdentify possible outliers in the data and decide what to do with them.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\ncheck distributions\n\nCheck the distribution and skewness of your data\n\nHistograms maybe boxplots\n\nand use group_by() in dplyr if your data has categorical information or numeric information with a limited number of unique values, group_by() is an important tool - example:\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nReorganizing information with arrange() in dplryr may offer additional insight that is more difficult to recognize it its natural or alphabetically ordered format:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nExploratory Visualization\n\nUnivariate – so bar chart, histogram - here you are trying to understand the distribution.\nBivariate or Multivariate – the scatter plot is the most basic but a boxplot, a heatmap, contour maps etc.",
    "crumbs": [
      "Activities",
      "Lecture 2 Activity"
    ]
  },
  {
    "objectID": "activity/ggplot2.html#example",
    "href": "activity/ggplot2.html#example",
    "title": "ggplot part 2",
    "section": "Example",
    "text": "Example\nCorrelation Analysis\nA correlation would be generated very early in the process of using data for research\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe would then move to a visualization of the relationship\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Activities",
      "Lecture 2 Activity"
    ]
  },
  {
    "objectID": "activity/RRefresher.html",
    "href": "activity/RRefresher.html",
    "title": "R Refresher",
    "section": "",
    "text": "This is an R Refresher adapted from Weisberg (2014) We will use packages ggplot2, knitr, dplyr and tidyr. We will use packages ggplot2, knitr, dplyr and tidyr. Also data from the palmerpenguins library."
  },
  {
    "objectID": "activity/RRefresher.html#dim",
    "href": "activity/RRefresher.html#dim",
    "title": "R Refresher",
    "section": "dim()",
    "text": "dim()\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "activity/RRefresher.html#head",
    "href": "activity/RRefresher.html#head",
    "title": "R Refresher",
    "section": "head()",
    "text": "head()\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "activity/RRefresher.html#summary",
    "href": "activity/RRefresher.html#summary",
    "title": "R Refresher",
    "section": "summary()",
    "text": "summary()\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nSummary is being abused here. While it is fast and gives us the count of NA (missing), do consider that rounding error could occur for the summary statistics. Functions for computing stats like mean( ) can be found elsewhere:"
  },
  {
    "objectID": "activity/RRefresher.html#descriptive-basics",
    "href": "activity/RRefresher.html#descriptive-basics",
    "title": "R Refresher",
    "section": "descriptive basics",
    "text": "descriptive basics\nChallenge (and working with webR), in teams, please compute the following for the variable birth_year in the starwars data:\n\nmean,\nsd,\nfive number summary,\ndeciles,\nthe number of missing values\nand a count (number) of unique birth years\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "activity/RRefresher.html#conditioninggrouping",
    "href": "activity/RRefresher.html#conditioninggrouping",
    "title": "R Refresher",
    "section": "conditioning/grouping",
    "text": "conditioning/grouping\nWe will use more of this later in the course, but for now, you should possess these fundamental data handling skills:\nin base R\nWe could use some basic character manipulation to make the result a little more compact. Here’s the issue:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThe variable hair_color is a little too granular, let’s propose a simple fix, just keep first mention of hair color:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNow let’s examine mass (weight) by hair_color and gender in base R:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nusing dplyr with a little tidyr\nThis is a preferred alternative to the base R solution because (1) it has more options and (2) you don’t lose as much information. First some data preparation, similar to the base R solution\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIf we were to stop after the summarize() below we would have a “long”/“tall” result suitable for data visualization and other functions, but it’s a little difficult to make comparisons as tabled results:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nBy using .groups = “drop” and a pivot_wider() (from tidyr) we arrive at a comparable outcome, notice the missing categories:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe will delve into more data handling in the future."
  },
  {
    "objectID": "activity/RRefresher.html#locally",
    "href": "activity/RRefresher.html#locally",
    "title": "R Refresher",
    "section": "locally",
    "text": "locally\nThis is the general format for reading data in base R (won’t run on this website, you’ll need to try it in R on your own computer)\nmy_data0 &lt;- read.table(\"filename\", header=TRUE,\nna.strings=\"NA\", sep = \"\")\nThere are modifications to this basic code, for example, read.csv() is just a alias of read.table() with sep = “,” as a default. We can use it in concert with file.choose() to allow you to select files from your local drive (won’t work here, just an example)\nmy_data1 &lt;- read.csv(file.choose(), header=TRUE,\nna.strings=\"NA\")"
  },
  {
    "objectID": "activity/RRefresher.html#remotely",
    "href": "activity/RRefresher.html#remotely",
    "title": "R Refresher",
    "section": "remotely",
    "text": "remotely\nWe can also read data from a website, note the use of read.table() with sep = “,”:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAnother good first step involves examining the structure of the object:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThis will help identify numeric and non-numeric data.\nWe could load an additional package, readr, to allow us to read additional data formats such as Excel files (this is something you can do in section or in an assignment)"
  },
  {
    "objectID": "activity/RRefresher.html#examples",
    "href": "activity/RRefresher.html#examples",
    "title": "R Refresher",
    "section": "Examples",
    "text": "Examples\nnormal\nThe normal distribution’s root is “norm”. The function pnorm() takes a quantile and returns a probability of observing a value less than or equal to 1.96 in a standard normal distribution:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe can change the pnorm defaults to accommodate a different situation, here, SAT scores combined math/verbal:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nqnorm() answers the question - given a probability what is the value of the associated quantile?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\ndnorm() - returns the height of the probability density function at points specified by the programmer. In the normal distribution, points farther from the mean have lower density\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nt\nThere are other distributions with different root names, but the same four letter identifier holds\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nchi-square\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nan additional density example and our bridge to visualization\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nTest yourself/your team\nPlease try generating values from another distribution (e.g., F, Poisson), you can find a longer list of distributions here: https://stat.ethz.ch/R-manual/R-devel/library/stats/html/Distributions.html\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "activity/RRefresher.html#saving-graphics",
    "href": "activity/RRefresher.html#saving-graphics",
    "title": "R Refresher",
    "section": "saving graphics",
    "text": "saving graphics\nWe can output graphics by using the GUI or directly in our code (will only run locally):\npdf(\"myhist.pdf\", height=5, width=5)\nhist(rnorm(100))\ndev.off()"
  },
  {
    "objectID": "activity/RRefresher.html#plot-in-base-r",
    "href": "activity/RRefresher.html#plot-in-base-r",
    "title": "R Refresher",
    "section": "plot() in base R",
    "text": "plot() in base R\nBase R’s plot() function is a reasonable starting point and convenient:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "activity/RRefresher.html#ggplot",
    "href": "activity/RRefresher.html#ggplot",
    "title": "R Refresher",
    "section": "ggplot( )",
    "text": "ggplot( )\nWe have more data visualization power with ggplot. We could add straight lines (AKA fit linear models) for each species and for overall\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "activity/RRefresher.html#plot-within-a-for-loop",
    "href": "activity/RRefresher.html#plot-within-a-for-loop",
    "title": "R Refresher",
    "section": "plot() within a for loop",
    "text": "plot() within a for loop\nAnother example, first using base R to plot 4 graphs in a single window:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "activity/RRefresher.html#tidyverse-style",
    "href": "activity/RRefresher.html#tidyverse-style",
    "title": "R Refresher",
    "section": "Tidyverse style",
    "text": "Tidyverse style\nWe can do the same with ggplot, but it requires more data handling\nFirst, pivot the data from wide to long/tall:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAlways check your results:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nggplot will be much happier with “long” (AKA “tall” maybe also “stacked”)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe can calculate the correlations for each set, the group_by() function combined with summarize in dplyr is very useful for that.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "activity/RRefresher.html#five-minute-ggplot-refresher",
    "href": "activity/RRefresher.html#five-minute-ggplot-refresher",
    "title": "R Refresher",
    "section": "Five minute ggplot refresher",
    "text": "Five minute ggplot refresher\nIf there is only one package you need in R, it’s ggplot. It’s simple and logical and flows with data beautifully. We can use penguins\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nggplot needs to know what data you plan to use and it needs to have an aesthetic (aes) specified.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNo error, but no graphic. All we have done is specified the data and given ggplot a sense of how the graphic should appear (x, y, color) as it relates to the features.\nThe “+” separates “layers”. Think of ggplot as like making a cake, you lay down the foundation and then you start decorating. Next up, the geom_ which tell ggplot how the features should be plotted.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThat is just about it. I do recommend you learn how to “facet” (condition) the plots:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nread “as a function of island”, if you wanted island on the rows, move to facet_grid()\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\na better use of facet_grid\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThe remaining functions deal with appearance such as labels, legends and maybe adding additional geoms:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "hw/hw-1.html",
    "href": "hw/hw-1.html",
    "title": "Homework 1 - EDA and Data Visualization",
    "section": "",
    "text": "Please upload your materials to be graded to BruinLearn only (not GitHub etc.)",
    "crumbs": [
      "Homework",
      "HW 1"
    ]
  },
  {
    "objectID": "hw/hw-1.html#part-i---assemble-your-toolkit",
    "href": "hw/hw-1.html#part-i---assemble-your-toolkit",
    "title": "Homework 1 - EDA and Data Visualization",
    "section": "Part I - Assemble Your Toolkit",
    "text": "Part I - Assemble Your Toolkit\nI’d like you to film (you could use Zoom to record) a navigation through your toolkit and submit that as completion of Part I of this homework assignment.\n\nIf you don’t already, you probably should have your own site where you can display your current work. Here are examples that are easily completed using Quarto (you can use the editor in RStudio)\n\n\nA previous TA\nAn undergrad\nMine\n\nB. You should have access to R (it’s free)\nC. You should have access to Python (it’s free)\nD. And Tableau (free to currently enrolled students)",
    "crumbs": [
      "Homework",
      "HW 1"
    ]
  },
  {
    "objectID": "hw/hw-1.html#part-ii-explore-some-data-generate-a-simple-visualization-and-talk-about-it.",
    "href": "hw/hw-1.html#part-ii-explore-some-data-generate-a-simple-visualization-and-talk-about-it.",
    "title": "Homework 1 - EDA and Data Visualization",
    "section": "Part II Explore some data, generate a simple visualization and talk about it.",
    "text": "Part II Explore some data, generate a simple visualization and talk about it.\nWe will use the centenarians dataset from tidytuesday:\nhttps://github.com/rfordatascience/tidytuesday/blob/master/data/2023/2023-05-30/readme.md\n\nPlease create a histogram, a density and a boxplot of the age variable. You can use ggplot or something else. What is more important here is “the story”. If you had to use one of these graphics to talk about age in this dataset to your coworkers/supervisors/thesis advisor, which one would you prefer to use and why?\nPlease create one new visualization of age and add a second variable. So for example, you could add gender and compare boxplots of age. Whatever you choose to do, keep the storytelling aspect in mind. Do some visualizations work better than others? Do they make talking about the relationship between age and second variable easier?\nPlease video record your answers to A and B as if you were presenting your findings. I should be able to see the graphic you decided to talk about and you should be able to discuss briefly why you chose the one you presented and not one of the others.",
    "crumbs": [
      "Homework",
      "HW 1"
    ]
  },
  {
    "objectID": "hw/hw-1.html#part-iii---discover-and-explore-data-of-your-choosing-submit-one-simple-visualization-and-write-about-it-and-the-process-of-arriving-at-it.",
    "href": "hw/hw-1.html#part-iii---discover-and-explore-data-of-your-choosing-submit-one-simple-visualization-and-write-about-it-and-the-process-of-arriving-at-it.",
    "title": "Homework 1 - EDA and Data Visualization",
    "section": "Part III - Discover and explore data of your choosing, submit ONE simple visualization, and write about it and the process of arriving at it.",
    "text": "Part III - Discover and explore data of your choosing, submit ONE simple visualization, and write about it and the process of arriving at it.\n\nIf you are currently working on your MASDS thesis, perhaps use its data for this part, if not, perhaps something you might use for your thesis or just something you like thinking/talking/writing about.\nData you cannot use: iris, diamonds, penguins, Titanic, anything from tidytuesday (unless your thesis advisor has already approved the use of any of those).\nYou may use ChatGPT or some other chatbot to help you.\n\n\nThe visualization should be thesis quality (you can examine MASDS theses online for a sense of what that means, the bar is not high but I would hope you would aim high) Examples from the eScholarship Repository\nThe visualization should contain a minimum of two features (variables, fields, whatever you like to call them). Example: in part II use we used age and gender.\nYou should be able to write about what you tried (you do not need to show any of the rejects unless you want to for shock/surprise/contrast) and why you didn’t like it or didn’t choose it. There is no bad answer here, I want you to see/hear your internal decision making with respect to data visualization. Perhaps just a few sentences.\nYou should be able to tell a brief story about the one visualization you chose for Part III. Perhaps a short paragraph.\nPlease submit a single PDF with the graphic of B and your answers to C and D with it.\n\nThis is due by the end of Week 2 (Saturday April 13th 11:59pm).",
    "crumbs": [
      "Homework",
      "HW 1"
    ]
  },
  {
    "objectID": "hw/hw-3.html",
    "href": "hw/hw-3.html",
    "title": "Homework 3",
    "section": "",
    "text": "What to turn in\nDue: anytime from 5/18 - 5/25/2024\nYou will be turning in brief (one page is fine, longer is OK too) draft of your plan for a final web app. Of course you can change your mind, but the point of Homework 3 is to get you thinking about it. A PDF is fine or a link to a document, whatever I can read, I’ll accept.\n\n\nAssignment\nI will ask you to fill these in\n\nTopic/Goal\n\nPlease answer the question “this is my topic for a web app” or “this is the goal of my web app”. So for example, “The goal of my southern California earthquake web app is to make customized visualizations of earthquake activity accessible to a non-technical audience. I also want the user to be able to download the data they choose for further process”\n\nData\n\nThe data set you plan to use. So for me, I am using the Southern California earthquake catalog from Caltech. See https://scedc.caltech.edu/\n\nLayout\n\nYou could handsketch a picture of your plan or provide an outline. Continuing my earthquake example (apologies for the lousy artwork,but hey, you know it’s mine…):",
    "crumbs": [
      "Homework",
      "HW 3"
    ]
  },
  {
    "objectID": "hw/hw-2.html",
    "href": "hw/hw-2.html",
    "title": "Homework 2",
    "section": "",
    "text": "Problem 1 - The LA90024_Buildings.RData (you can download this in Week 3 of BruinLearn) has some information on buildings in the 90024 Zip Code (Westwood in Los Angeles) that you may find interesting.\nProblem 2 - Just some numeric X & Y data used as a example, but the homework problem should use the building data from Problem 1. you can supply your own data if you want for this problem.\nProblem 3 - For geom_hex() used movies taken from an IMDB database (originally from Kaggle). For geom_tile() data were obtained from Yahoo Finance TSLA as an example but using AAPL here. You can use the movie data or try a different stock (like TSLA) or stocks (would require more data handling but if its your area of interest, why not?)",
    "crumbs": [
      "Homework",
      "HW 2"
    ]
  },
  {
    "objectID": "hw/hw-2.html#about-the-data-used",
    "href": "hw/hw-2.html#about-the-data-used",
    "title": "Homework 2",
    "section": "",
    "text": "Problem 1 - The LA90024_Buildings.RData (you can download this in Week 3 of BruinLearn) has some information on buildings in the 90024 Zip Code (Westwood in Los Angeles) that you may find interesting.\nProblem 2 - Just some numeric X & Y data used as a example, but the homework problem should use the building data from Problem 1. you can supply your own data if you want for this problem.\nProblem 3 - For geom_hex() used movies taken from an IMDB database (originally from Kaggle). For geom_tile() data were obtained from Yahoo Finance TSLA as an example but using AAPL here. You can use the movie data or try a different stock (like TSLA) or stocks (would require more data handling but if its your area of interest, why not?)",
    "crumbs": [
      "Homework",
      "HW 2"
    ]
  },
  {
    "objectID": "hw/hw-2.html#problem-1",
    "href": "hw/hw-2.html#problem-1",
    "title": "Homework 2",
    "section": "Problem 1",
    "text": "Problem 1\nPleae examine the next two graphics, what are things that we can do to make our visualizations tell a more compelling story? You can try programming your response (preferred) or provide a hand drawn sketch. Any language is acceptable.\nGraphic 1\nHere is a graphic of Floor_Area (building size) and CO2 emissions (a measure of pollution or warming), how could we improve this to make its story more interesting or useful (feel free to examine the distribution of the x and y variables individually if it helps)?\n\nggplot(data = LA90024_Buildings) +\n  geom_point(aes(x = Floor_Area, \n                 y = CO2_Emissions)) +\n  labs(title = \"CO2 emissions by Floor Area\") +\n  xlab(\"Floor Area\") +\n  ylab(\"CO_2 Emissions\")\n\n\n\n\n\n\n\nGraphic 2\nHere is a graphic of Floor_Area (building size) and Water Usage. Again, what can we do to make this a little more useful to others? What is the story in here?\n\nggplot(data = LA90024_Buildings) +\n  geom_point(aes(x = Floor_Area, \n                 y = Water_Use)) +\n  labs(title = \"Water Usage by Floor Area\") +\n  xlab(\"Floor Area\") +\n  ylab(\"Water Use\")",
    "crumbs": [
      "Homework",
      "HW 2"
    ]
  },
  {
    "objectID": "hw/hw-2.html#problem-2",
    "href": "hw/hw-2.html#problem-2",
    "title": "Homework 2",
    "section": "Problem 2",
    "text": "Problem 2\nSuppose you have been asked to model either CO2 emission or Water Use (Y - but just choose one) on Floor Area (X). A regression type of line is what we would like to see, but three forms\n\nOne regression line for your x, y plot\nMultiple regression lines based on a third variable\nUse of a smoother, one or more lines is fine\n\nhere are examples using a different x & y relationship",
    "crumbs": [
      "Homework",
      "HW 2"
    ]
  },
  {
    "objectID": "hw/hw-2.html#problem-3",
    "href": "hw/hw-2.html#problem-3",
    "title": "Homework 2",
    "section": "Problem 3",
    "text": "Problem 3\nMore work with heatmaps. I’d like you to try either a geom_hex() or a geom_tile() (of course you could create both, but one is fine). Both X and Y here are numeric in all of these examples but ordered factors should work (so if you want to use something like a sports-related dataset with teamnames etc. it’s do-able).\nYou can use the data I used (least preferred) or supply your own from your thesis or other interests (most preferred) OR use something like diamonds, iris, etc. (somewhere in the middle)\nA trick is to use scale_fill_gradientn() to build your own colors scheme. I will show you the basic code for these and then what you should do for homework is modify it some way that makes it more pleasing to you (something you might want in your thesis for example).\nmovies\n\nmovies &lt;- read_csv(\"https://raw.githubusercontent.com/lewv/S24STATS101A/main/data/movies.csv\")\n\nRows: 7551 Columns: 15\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (9): name, rating, genre, released, director, writer, star, country, com...\ndbl (6): year, score, votes, budget, gross, runtime\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nA basic geom_hex() style heat map, added color = “white” to give it a border otherwise it is really unattractive (very dark by default)\n\nggplot(movies, aes(x = year, y = score) ) +\n  geom_hex(color = \"white\")\n\n\n\n\n\n\n\nAdding a scale_fill_gradientn() (your homework part is to figure out how to color a heatmap). I programmed something simple and used the rainbow() function, like rainbow(4) to generate this color scheme.\n\n\n\n\n\n\n\n\nIf we remove color= “white” from geom_hex(), we obtain a softer more “watercolor” effect in ggplot:\n\n\n\n\n\n\n\n\nStock prices\nFor this stock market graphic, handling the dates correctly is key. So this second graph is more a data management issue. (if the truth be told, data graphics is all about having envisioned a graphic then handling the data to make the graphic real)\nSince there are many dates, use lubridate (part of Tidyverse) and try to maximize the information extracted from the dates. The following code gives us week of the year, day of the week (Monday = 1) and year.\n\nAAPL &lt;- read_csv(\"https://raw.githubusercontent.com/lewv/S24STATS101A/main/data/AAPL.csv\") %&gt;% \n  mutate(week = isoweek(Date),\n         wday = wday(Date, week_start = 1),\n         year = year(Date))\n\ngeom_tile() is another good heatmap generator in R. Like geom_hex (or any other graphic) adding color will be key but supplying the basic aes() specification is just as important:\n\nggplot(data= AAPL, aes(x = week, \n                       y = wday, \n                       fill = Close)) +\n  geom_tile()\n\n\n\n\n\n\n\nThis is where faceting is so useful and using a color to create borders can be helpful especially when presenting information. Still ugly and five times as ugly now… BUT a story is emerging.\n\nggplot(data= AAPL, aes(x = week, \n                       y = wday, \n                       fill = Close)) +\n  geom_tile(color = 'white') +\n  facet_wrap(~ year) \n\n\n\n\n\n\n\nFaceting has lots of options. One option is conceptualize the graphic as a kind of storyboard and to use the vertical scrolling (easier) to your advantage. You see vertical scrolling used effectively in news stories or photojournalism. Choosing a single column will also make each graphic wider which will help with the x-axis labels (the wider dimension):\n\nggplot(data= AAPL, aes(x = week, \n                       y = wday, \n                       fill = Close)) +\n  geom_tile(color = 'white') +\n  facet_wrap(~ year, ncol = 1) \n\n\n\n\n\n\n\nLastly, add a scale_file_gradientn (chose your own colors) to make the graphic more lively.\n\n\n\n\n\n\n\n\nAdditional suggestions, you can always modify theme to help readability:\n\n  theme(axis.text = element_text(size = 6),\n        axis.title = element_text(size = 8, face = \"bold\"))\n\nYou might even add something like a weekly statistic or a monthly one to your graph within year. You would need to perform some additional data handling though.",
    "crumbs": [
      "Homework",
      "HW 2"
    ]
  },
  {
    "objectID": "hw/hw-2.html#what-to-turn-in",
    "href": "hw/hw-2.html#what-to-turn-in",
    "title": "Homework 2",
    "section": "What to turn in",
    "text": "What to turn in\nYour resulting graphics for 1, 2 and 3 and a copy of the code that produced them.",
    "crumbs": [
      "Homework",
      "HW 2"
    ]
  },
  {
    "objectID": "hw/hw-2.html#extra-stuff",
    "href": "hw/hw-2.html#extra-stuff",
    "title": "Homework 2",
    "section": "Extra stuff",
    "text": "Extra stuff\nBarplots\nThey look dull but are so modifiable and more important – everyone understands them.\nI wanted to add a problem on modified barplots, but it got too involved because great barplots involve intensive modification and data handling.\nSo, instead, here are a few examples, the last one taken directly from a professional on the internet and modified so that you can run and modify it on your own versions of R:\nbasic circle with labels\n\n# Libraries\nlibrary(tidyverse)\n \n# Create dataset\nikea &lt;- read_csv(\"https://raw.githubusercontent.com/lewv/S24STATS101A/main/data/ikea.csv\")\n\nikea_group &lt;- ikea %&gt;%\n  group_by(category) %&gt;%\n  summarise(mean_price = mean(price, na.rm = TRUE)) %&gt;%\n  mutate(id = row_number()) %&gt;%\n  ungroup()\n\n# Get the name and the y position of each label\nlabel_data &lt;- ikea_group\n \n# calculate the ANGLE of the labels\nnumber_of_bar &lt;- nrow(label_data)\nangle &lt;-  90 - 360 * (label_data$id-0.5) /number_of_bar     # Subtract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)\n \n# calculate the alignment of labels: right or left\n# On the left part of the plot, my labels have currently an angle &lt; -90\nlabel_data$hjust &lt;-ifelse(angle &lt; -90, 1, 0)\n \n# flip angle to make them readable\nlabel_data$angle&lt;-ifelse(angle &lt; -90, angle+180, angle)\n# ----- ------------------------------------------- ---- #\n\n\n \n# Make the plot\np &lt;- ggplot(ikea_group, \n            aes(x=as.factor(id), \n                y=mean_price)) +       \n              \n# Note that id is a factor. If x is numeric, there is some space between the first bar and axis\n  \n  # the bars with a blue color\n  geom_bar(stat=\"identity\", \n           color = \"black\", # outline\n           fill=alpha(\"blue\", 0.3)) +\n  \n  # Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add extra space over each bar\n  ylim(-200, 3500) +\n  \n  # Customize the theme: no axis title and no cartesian grid on the backgroud\n  theme_minimal() +\n  theme(\n    axis.text = element_blank(),\n    axis.title = element_blank(),\n    panel.grid = element_blank(),\n    plot.margin = unit(rep(-2,4), \"cm\") # Remove margin around plot\n  ) +\n  \n  # This makes the coordinate polar instead of cartesian.\n  coord_polar(start = 0) +\n\n  # add labels\n    geom_text(data=label_data, aes(x=id, y=mean_price+10, label=category, hjust=hjust), color=\"black\", fontface=\"bold\",alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE ) # inherit.aes very important because the original aes is in the ggplot function and not the geom.\n\np # show the graphic\n\n\n\n\n\n\n\nDonut from lecture 2\n\nggplot(data = ikea_group, aes(x=\"\", y=mean_price, fill=category)) +\n  geom_bar(stat=\"identity\", width = 0.75, color = \"black\") + # vary width for size of hole\n  coord_polar(theta=\"y\") +  # for circular plot\n  theme(legend.position = \"bottom\",\n        legend.text = element_text(size=5),\n        legend.key.size = unit(0.4, 'cm'), \n        legend.title=element_blank(),\n        panel.grid = element_blank(),  \n        axis.text = element_blank(), \n        axis.title = element_blank(), \n        axis.ticks = element_blank()) +\n  annotate(\"text\", x = 0, y = 0, label = \"\") # for the hole\n\n\n\n\n\n\n\nadvanced with coord_polar()\n\n#tidytuesday winner November 2020\n#data on washington hiking routes scraped by tidyx\n#script by tobias stalder\n#nov 2020\n#tobias-stalder.netlify.app\n\n\n\n# load libraries ----------------------------------------------------------\nlibrary(tidytuesdayR)\nlibrary(stringr)\nlibrary(scales)\n\n# load data ---------------------------------------------------------------\n\ntt_output &lt;- tt_load(\"2020-11-24\")\n\n\n    Downloading file 1 of 1: `hike_data.rds`\n\nhike_data &lt;- tt_output$hike_data\n\n\n# data manipulation -------------------------------------------------------\n\n#1) extract 'region' (entry before \"--\" of location data)\nword(hike_data$location,1,sep = \" -- \") -&gt; hike_data$region\nhike_data$region &lt;- as.factor(hike_data$region)\n\n#2)extract miles\nas.numeric(sapply(strsplit(hike_data$length, \" \"), \"[[\", 1)) -&gt; hike_data$length_num\n\n#3) transform everything necessary to numeric type\nhike_data$gain &lt;- as.numeric(hike_data$gain)\nhike_data$highpoint &lt;- as.numeric(hike_data$highpoint)\nas.numeric(row.names(hike_data))-&gt; hike_data$trackNr\n\nhike_data &lt;- data.frame(hike_data) #convert to dataframe (could also be done anywhere before)\n\n\n\n#4) Calculate cummulative length, mean(gain)\nsummary_stats &lt;- hike_data %&gt;%\n  group_by(region) %&gt;%\n  summarise(sum_length = sum(length_num),\n            mean_gain = mean(gain),) %&gt;%\n  mutate(mean_gain = round(mean_gain, digits = 0))\n\n#5) cummulative nr of tracks per region.\ntrackNrs &lt;- hike_data %&gt;%\n  group_by(region) %&gt;%\n  count()  #we can just count the number of entries here since 1 row = 1 track.\n\n#6) join nr of tracks back to summary_stats\nsummary_all &lt;- left_join(summary_stats, trackNrs, by = \"region\") \n\n\n# data visualisation ------------------------------------------------------\n\n#ggplot2\nggplot(summary_all) +\n  \n  #make custom panel grid\n  geom_hline(yintercept = 0, color = \"lightgrey\") +\n  geom_hline(yintercept = 1000, color = \"lightgrey\") +\n  geom_hline(yintercept = 2000, color = \"lightgrey\") +\n  geom_hline(yintercept = 3000, color = \"lightgrey\") +\n  \n  geom_col(aes(\n    x = reorder(str_wrap(region,5),sum_length), #is numeric\n    y = sum_length, #is numeric\n    fill = n), #is a factor\n    position = \"dodge2\",\n    show.legend = TRUE,\n    alpha = .9) +\n  \n  #new fill and legend title for number of tracks per region\n  scale_fill_gradientn(\"Amount of Tracks\",\n                       colours = c( \"#6C5B7B\",\"#C06C84\",\"#F67280\",\"#F8B195\"))+\n  \n  #mean gain per region\n  geom_point(aes(x = reorder(str_wrap(region,5),sum_length),\n                 y = mean_gain),\n             size = 3,\n             color = \"gray12\")+\n  \n  #lollipop shaft for mean gain per region\n  geom_segment(aes(\n    x = reorder(str_wrap(region,5),sum_length),\n    y = 0,\n    xend = reorder(str_wrap(region,5),sum_length),\n    yend = 3000),\n    linetype = \"dashed\",\n    color = \"gray12\") +\n  \n  \n  #annotate the bars and the lollipops so the reader understands the scaling\n  annotate(x = 11, y = 1300,\n           label = \"Mean Elevation Gain\\n[FASL]\",\n           geom = \"text\",\n           angle = -67.5,\n           color = \"gray12\",\n           size = 2.5)+\n  # family = \"Bell MT\"\n  annotate(x = 11, y = 3150,\n           label = \"Cummulative Length [FT]\",\n           geom = \"text\",\n           angle = 23,\n           color = \"gray12\",\n           size = 2.5)+\n  #,family = \"Bell MT\"\n  #annotate custom scale inside plot\n  annotate(x = 11.7, y =1100, label = \"1000\", geom = \"text\", color = \"gray12\", family = \"Bell MT\")+\n  annotate(x = 11.7, y =2100, label = \"2000\", geom = \"text\", color = \"gray12\", family = \"Bell MT\")+\n  annotate(x = 11.7, y =3100, label = \"3000\", geom = \"text\", color = \"gray12\", family = \"Bell MT\")+\n  \n  #scale y axis so bars don't start in the center\n  scale_y_continuous(limits = c(-1500, 3500),\n                     expand = c(0,0),\n                     breaks = c(0, 1000, 2000, 3000))+\n  \n  #add title, subtitle & caption\n  labs(title = \"\\nHiking Locations in Washington\",\n       subtitle = paste(\"\\nThis Visualisation shows the cummulative length of tracks,\",\n                        \"the amount of tracks and the mean gain in elevation per location.\\n\",\n                        \"If you are an experienced hiker, you might want to go\",\n                        \"to the North Cascades since there are a lot of tracks,\",\n                        \"higher elevations and total length to overcome.\",\n                        sep = \"\\n\"),\n       caption = \"\\n\\nData Visualisation by Tobias Stalder\\ntobias-stalder.netlify.app\\nSource: TidyX Crew (Ellis Hughes, Patrick Ward)\\nLink to Data: github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-11-24/readme.md\") +\n  \n  #transform to polar coordinate system\n  coord_polar() +\n  \n  #theming\n  theme(legend.position = \"bottom\",\n        axis.title = element_blank(),\n        axis.ticks = element_blank(),\n        axis.text.y = element_blank(),\n        axis.text.x = element_text(color = \"gray12\",\n                                   size = 12),\n        panel.background = element_rect(fill = \"white\",\n                                        color = \"white\"),\n        panel.grid = element_blank(),\n        panel.grid.major.x = element_blank(),\n        text = element_text(color = \"gray12\",\n                            family = \"Bell MT\"),\n        plot.title = element_text(face = \"bold\",\n                                  size = 25,\n                                  hjust = 0.05),\n        plot.subtitle = element_text(size = 14,\n                                     hjust = 0.05),\n        plot.caption = element_text(size = 10,\n                                    hjust = .5))+\n  \n  guides(fill = guide_colorsteps(barwidth = 15,\n                                 barheight = .5, \n                                 title.position = \"top\",\n                                 title.hjust = .5))",
    "crumbs": [
      "Homework",
      "HW 2"
    ]
  },
  {
    "objectID": "activity/ikea.html",
    "href": "activity/ikea.html",
    "title": "Tidy Tuesday IKEA example",
    "section": "",
    "text": "import os\nimport pandas as pd\nfrom plotnine import *\nimport numpy as np\n\n\ndf = pd.read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-11-03/ikea.csv')\ndf\n\n\n\n\n\n\n\n\n\nUnnamed: 0\nitem_id\nname\ncategory\nprice\nold_price\nsellable_online\nlink\nother_colors\nshort_description\ndesigner\ndepth\nheight\nwidth\n\n\n\n\n0\n0\n90420332\nFREKVENS\nBar furniture\n265.0\nNo old price\nTrue\nhttps://www.ikea.com/sa/en/p/frekvens-bar-tabl...\nNo\nBar table, in/outdoor, 51x51 cm\nNicholai Wiig Hansen\nNaN\n99.0\n51.0\n\n\n1\n1\n368814\nNORDVIKEN\nBar furniture\n995.0\nNo old price\nFalse\nhttps://www.ikea.com/sa/en/p/nordviken-bar-tab...\nNo\nBar table, 140x80 cm\nFrancis Cayouette\nNaN\n105.0\n80.0\n\n\n2\n2\n9333523\nNORDVIKEN / NORDVIKEN\nBar furniture\n2095.0\nNo old price\nFalse\nhttps://www.ikea.com/sa/en/p/nordviken-nordvik...\nNo\nBar table and 4 bar stools\nFrancis Cayouette\nNaN\nNaN\nNaN\n\n\n3\n3\n80155205\nSTIG\nBar furniture\n69.0\nNo old price\nTrue\nhttps://www.ikea.com/sa/en/p/stig-bar-stool-wi...\nYes\nBar stool with backrest, 74 cm\nHenrik Preutz\n50.0\n100.0\n60.0\n\n\n4\n4\n30180504\nNORBERG\nBar furniture\n225.0\nNo old price\nTrue\nhttps://www.ikea.com/sa/en/p/norberg-wall-moun...\nNo\nWall-mounted drop-leaf table, ...\nMarcus Arvonen\n60.0\n43.0\n74.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n3689\n3689\n99157902\nELVARLI\nWardrobes\n750.0\nSR 820\nTrue\nhttps://www.ikea.com/sa/en/p/elvarli-1-section...\nNo\n1 section, 92x51x222-350 cm\nEhlén Johansson\n50.0\nNaN\n91.0\n\n\n3690\n3690\n9158152\nELVARLI\nWardrobes\n1572.0\nSR 1,755\nTrue\nhttps://www.ikea.com/sa/en/p/elvarli-2-section...\nNo\n2 sections, 135x51x222-350 cm\nEhlén Johansson\n50.0\nNaN\n135.0\n\n\n3691\n3691\n59157541\nELVARLI\nWardrobes\n924.0\nSR 1,050\nTrue\nhttps://www.ikea.com/sa/en/p/elvarli-2-section...\nNo\n2 sections, 175x51x222-350 cm\nEhlén Johansson\n50.0\nNaN\n175.0\n\n\n3692\n3692\n89157573\nELVARLI\nWardrobes\n2745.0\nSR 3,130\nTrue\nhttps://www.ikea.com/sa/en/p/elvarli-3-section...\nNo\n3 sections, 178x51x222-350 cm\nEhlén Johansson\n50.0\nNaN\n178.0\n\n\n3693\n3693\n69157376\nELVARLI\nWardrobes\n1231.0\nSR 1,535\nTrue\nhttps://www.ikea.com/sa/en/p/elvarli-2-section...\nNo\n2 sections, 175x51x222-350 cm\nEhlén Johansson\n50.0\nNaN\n175.0\n\n\n\n\n3694 rows × 14 columns\n\n\n\n\n\nikea = df.copy()\nikea.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 3694 entries, 0 to 3693\nData columns (total 14 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   Unnamed: 0         3694 non-null   int64  \n 1   item_id            3694 non-null   int64  \n 2   name               3694 non-null   object \n 3   category           3694 non-null   object \n 4   price              3694 non-null   float64\n 5   old_price          3694 non-null   object \n 6   sellable_online    3694 non-null   bool   \n 7   link               3694 non-null   object \n 8   other_colors       3694 non-null   object \n 9   short_description  3694 non-null   object \n 10  designer           3694 non-null   object \n 11  depth              2231 non-null   float64\n 12  height             2706 non-null   float64\n 13  width              3105 non-null   float64\ndtypes: bool(1), float64(4), int64(2), object(7)\nmemory usage: 378.9+ KB"
  },
  {
    "objectID": "activity/ggplot1.html",
    "href": "activity/ggplot1.html",
    "title": "ggplot part 1",
    "section": "",
    "text": "Please enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Activities",
      "Lecture 1 Activity 2"
    ]
  },
  {
    "objectID": "activity/ggplot1.html#loading-libraries",
    "href": "activity/ggplot1.html#loading-libraries",
    "title": "ggplot part 1",
    "section": "",
    "text": "Please enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Activities",
      "Lecture 1 Activity 2"
    ]
  },
  {
    "objectID": "activity/ggplot1.html#five-minute-ggplot",
    "href": "activity/ggplot1.html#five-minute-ggplot",
    "title": "ggplot part 1",
    "section": "Five minute ggplot",
    "text": "Five minute ggplot\nIf there is only one package you need in R, it’s ggplot. It’s simple and logical and flows with data beautifully. We can use penguins\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAT MINIMUM ggplot needs to know what data you plan to use and it needs to have an aesthetic (aes) specified. We will choose two numeric variables.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNo error, but no graphic. All we have done is specified the data and given ggplot a sense of how the graphic should appear (x, y) as it relates to the features.\nThe “+” in ggplot separates “layers” of a graphic.\nThink of ggplot as like making a cake, you lay down the foundation and then you start decorating. Next up, the geom_ which tell ggplot how the features should be plotted.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThat is about five minutes. The rest of ggplot is about beautifying your graphic through additional options. Mapping the data to the aesthetic then is the most critical skill here.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Activities",
      "Lecture 1 Activity 2"
    ]
  },
  {
    "objectID": "activity/ggplot1.html#ggplot-in-detail",
    "href": "activity/ggplot1.html#ggplot-in-detail",
    "title": "ggplot part 1",
    "section": "ggplot in detail",
    "text": "ggplot in detail\nOk let’s slow down, identify the data types within the dataset\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nand let’s fix some issues with missing values or we will get lots of warnings\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Activities",
      "Lecture 1 Activity 2"
    ]
  },
  {
    "objectID": "activity/ggplot1.html#non-numeric-variables",
    "href": "activity/ggplot1.html#non-numeric-variables",
    "title": "ggplot part 1",
    "section": "Non-Numeric Variables",
    "text": "Non-Numeric Variables\nHow do we work with non-numeric information (like gender)?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Activities",
      "Lecture 1 Activity 2"
    ]
  },
  {
    "objectID": "activity/ggplot1.html#multiple-geoms",
    "href": "activity/ggplot1.html#multiple-geoms",
    "title": "ggplot part 1",
    "section": "Multiple Geoms",
    "text": "Multiple Geoms\nYou might be asking - sometimes you put an aes( ) in the geom, sometimes not? Some would tell you it should only go in the geom() but that works best if you have multiple geoms:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nGets messy though, this suggests an appearance issue, we get into themes (later)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nGo badk to something simpler. Plotting categorical variables with different geoms.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nInteraction is a handy function, comining sex and species:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Activities",
      "Lecture 1 Activity 2"
    ]
  },
  {
    "objectID": "activity/ggplot1.html#faceting",
    "href": "activity/ggplot1.html#faceting",
    "title": "ggplot part 1",
    "section": "Faceting",
    "text": "Faceting\nI do recommend you learn how to “facet” (condition) the plots:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nread “as a function of island”, if you wanted island on the rows, move to facet_grid()\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\na better use of facet_grid\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Activities",
      "Lecture 1 Activity 2"
    ]
  },
  {
    "objectID": "activity/ggplot1.html#statistics",
    "href": "activity/ggplot1.html#statistics",
    "title": "ggplot part 1",
    "section": "Statistics",
    "text": "Statistics\nSome of the geoms automatically apply a statistical transformation to the data, we need to do little except call them:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nbut others require additional work on our part\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nreturn to geom_bar",
    "crumbs": [
      "Activities",
      "Lecture 1 Activity 2"
    ]
  },
  {
    "objectID": "activity/ggplot1.html#scales-coordinate-flipping",
    "href": "activity/ggplot1.html#scales-coordinate-flipping",
    "title": "ggplot part 1",
    "section": "Scales + Coordinate flipping",
    "text": "Scales + Coordinate flipping\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Activities",
      "Lecture 1 Activity 2"
    ]
  },
  {
    "objectID": "activity/ggplot1.html#themes",
    "href": "activity/ggplot1.html#themes",
    "title": "ggplot part 1",
    "section": "Themes",
    "text": "Themes\nThe remaining functions of ggplot deal with appearance such as labels, legends, tick marks, background color etc. etc.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Activities",
      "Lecture 1 Activity 2"
    ]
  },
  {
    "objectID": "activity/ggplot1.html#team-challenge",
    "href": "activity/ggplot1.html#team-challenge",
    "title": "ggplot part 1",
    "section": "Team Challenge",
    "text": "Team Challenge\nTeams - you can use penguins or choose your own data (and you don’t need to use this web app but you need to use ggplot).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nI’d like to see what you can do as teams in a short amount of time.",
    "crumbs": [
      "Activities",
      "Lecture 1 Activity 2"
    ]
  },
  {
    "objectID": "activity/06Simulation.html",
    "href": "activity/06Simulation.html",
    "title": "Lecture 6 Activity",
    "section": "",
    "text": "Please enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "activity/06Simulation.html#loading-libraries",
    "href": "activity/06Simulation.html#loading-libraries",
    "title": "Lecture 6 Activity",
    "section": "",
    "text": "Please enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "activity/06Simulation.html#example-read-the-data",
    "href": "activity/06Simulation.html#example-read-the-data",
    "title": "Lecture 6 Activity",
    "section": "Example: Read the data",
    "text": "Example: Read the data\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "activity/06Simulation.html#basic-examination",
    "href": "activity/06Simulation.html#basic-examination",
    "title": "Lecture 6 Activity",
    "section": "Basic examination",
    "text": "Basic examination\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nA graphical component\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nPlease generate a team graphic\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "activity/06Simulation.html#modeling",
    "href": "activity/06Simulation.html#modeling",
    "title": "Lecture 6 Activity",
    "section": "Modeling",
    "text": "Modeling\nadd a line to a scattering of points\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nSetting up a bootstrap\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nestimating many models\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\naugment many models\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nvisualize\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nmore coefficients\nExtracting coefficients from many models\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nTeam questions - are there any concerns with trying to predict the cost of the trip from the miles traveled? This sample was n = 400 instead of 300 as in lecture, do we see any differences?"
  },
  {
    "objectID": "activity/Week03ggplot.html",
    "href": "activity/Week03ggplot.html",
    "title": "Week 3 ggplot",
    "section": "",
    "text": "Please enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Activities",
      "Lecture 3 Activity ggplot"
    ]
  },
  {
    "objectID": "activity/Week03ggplot.html#loading-libraries",
    "href": "activity/Week03ggplot.html#loading-libraries",
    "title": "Week 3 ggplot",
    "section": "",
    "text": "Please enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Activities",
      "Lecture 3 Activity ggplot"
    ]
  },
  {
    "objectID": "activity/Week03ggplot.html#example-read-the-data",
    "href": "activity/Week03ggplot.html#example-read-the-data",
    "title": "Week 3 ggplot",
    "section": "Example: Read the data",
    "text": "Example: Read the data\nThis is a sample of size 400 drawn from a much larger https://www.kaggle.com/datasets/adelanseur/taxi-trips-chicago-2024 database.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Activities",
      "Lecture 3 Activity ggplot"
    ]
  },
  {
    "objectID": "activity/Week03ggplot.html#basic-examination",
    "href": "activity/Week03ggplot.html#basic-examination",
    "title": "Week 3 ggplot",
    "section": "Basic examination",
    "text": "Basic examination\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Activities",
      "Lecture 3 Activity ggplot"
    ]
  },
  {
    "objectID": "activity/Week03ggplot.html#visualization-challenge",
    "href": "activity/Week03ggplot.html#visualization-challenge",
    "title": "Week 3 ggplot",
    "section": "Visualization Challenge",
    "text": "Visualization Challenge\nBy this week, you should be very comfortable with ggplot (if not, ask questions)\nHere is a basic boxplot (or you and your team can try some other type of graphic, I like at least two variables)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThe things you should be able to do after Week 3 are:\n- more geoms\n- more variables\n- color, fill, opacity\n- labels\n- change themes\nHere is an empty box if you prefer\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Activities",
      "Lecture 3 Activity ggplot"
    ]
  },
  {
    "objectID": "StoryTelling.html#a-story",
    "href": "StoryTelling.html#a-story",
    "title": "Story Time",
    "section": "A story",
    "text": "A story\n\nHere is one you might all know\n\nIn 1912, Rose boards a ship, where she meets and falls in love with Jack, a poor artist, threatening her engagement to the wealthy Cal.\nAs their romance blossoms, they navigate social boundaries and personal freedoms aboard the luxurious ship.\nThe ship hits an iceberg, causing catastrophic damage and panic among passengers and crew as the ship begins to sink.\nJack and Rose fight for survival, facing both physical dangers and societal expectations in their desperate bid to stay together.\nTragically, it ends with the sinking of the ship, with Jack sacrificing his life to save Rose, who survives to tell their story."
  },
  {
    "objectID": "StoryTelling.html#section",
    "href": "StoryTelling.html#section",
    "title": "Story Time",
    "section": "",
    "text": "A Picture of Contrasts\n\nFive bullets on a slide vs A famous movie\nAdjusted for inflation, $1.2 Billion in US box office movie business\nQuote from Robert McGee (2003 Harvard Business Review) on stories: “fulfill a profound human need to grasp the patterns of living not merely as an intellectual exercise, but within a very personal, emotional experience”"
  },
  {
    "objectID": "StoryTelling.html#section-1",
    "href": "StoryTelling.html#section-1",
    "title": "Story Time",
    "section": "",
    "text": "An Outline to close out tonight\n\nGOAL: connect your ideas/analyses to your audience’s emotion\n\nSuggested solution: the best way - tell a compelling story\n\nWhat?\n\nStories allow us to weave a lot of information into whatever we are presenting\nand allows you to connect to your audience’s emotions and energy.\n\nTHIS IS NOT EASY TO DO! (practice makes perfect)"
  },
  {
    "objectID": "StoryTelling.html#section-2",
    "href": "StoryTelling.html#section-2",
    "title": "Story Time",
    "section": "",
    "text": "An Outline to close out tonight (cont’d)\n\nREQUIREMENTS\n\nclear understanding of your material\nstorytelling skills to present ideas that connect with your audience\n\nRESULT - your ideas are REMEMBERED.\nIf you can capture the principles of good storytelling, then you get people applauding instead of yawning."
  },
  {
    "objectID": "StoryTelling.html#section-3",
    "href": "StoryTelling.html#section-3",
    "title": "Story Time",
    "section": "",
    "text": "If we have time (if not, check Campuswire)\n\n\n\nIKEA data\n\n\nSuppose you were interviewing with IKEA or consulting with them\nI’d like you to examine the data with an interview in mind\nWith the specific goal of building a visualization from it (no programming necessary)"
  },
  {
    "objectID": "StoryTelling.html#section-4",
    "href": "StoryTelling.html#section-4",
    "title": "Story Time",
    "section": "",
    "text": "A data visualization with a story\n\nstories often center on life as it is/was and its patterns of change"
  },
  {
    "objectID": "StoryTelling.html#section-5",
    "href": "StoryTelling.html#section-5",
    "title": "Story Time",
    "section": "",
    "text": "Categories of Data Viz stories\n\nThere are plenty, to name a few\n\nillustrate change\n\ncommunicate understanding\n\npurely descriptive\n\nposes solutions to a problem\n\n\nNeuroscientists tell us we forget bullet points, but we remember stories."
  },
  {
    "objectID": "StoryTelling.html#section-6",
    "href": "StoryTelling.html#section-6",
    "title": "Story Time",
    "section": "",
    "text": "Some applicable situations\n\nWe could identify some situations where Data Viz storytelling might apply:\n\nConvincing your committee your model is the best model\n\nPersuading your employer to apply your recommender system\nExplaining to a prospective employer the visualization you created for the interview\nHighlighting problems, finding something of interest (possible solution?)"
  },
  {
    "objectID": "StoryTelling.html#reassurance",
    "href": "StoryTelling.html#reassurance",
    "title": "Story Time",
    "section": "Reassurance",
    "text": "Reassurance\n\nThere is NO expectation of perfection in Stats 422\nGenerating data visualizations with ggplot has a learning curve\n\nEven if you use ChatGPT"
  },
  {
    "objectID": "StoryTelling.html#section-7",
    "href": "StoryTelling.html#section-7",
    "title": "Story Time",
    "section": "",
    "text": "Strategic Storytelling with Data Visualization\n\nKeep it simple\nEdit ruthlessly\nBe genuine\nDon’t communicate for yourself — communicate for your audience.\nThe story you are telling is not for you; the story is for them. Help your audience to see what you see in the data."
  },
  {
    "objectID": "StoryTelling.html#section-8",
    "href": "StoryTelling.html#section-8",
    "title": "Story Time",
    "section": "",
    "text": "More on the Audience\n\nAlways keep your audience in mind. Give them a reason for spending time with you.\nThink about what will resonate with them and motivate them.\nAlso think about whether and when data will strengthen your story and integrate data sensibly.\nMake the information presented specific and relevant to your audience."
  },
  {
    "objectID": "StoryTelling.html#section-9",
    "href": "StoryTelling.html#section-9",
    "title": "Story Time",
    "section": "",
    "text": "Advice for Data Visualizations & their stories\n\nEven the most beautiful data visualization might fail if it does not possess a compelling story/narrative.\nA strong story will overcome a weak data visualization.\nAim to display data in such a way that makes the complex clear.\nTHE IDEAL - when effective visuals are combined with a powerful story."
  },
  {
    "objectID": "StoryTelling.html#section-10",
    "href": "StoryTelling.html#section-10",
    "title": "Story Time",
    "section": "",
    "text": "Tactical advice on Data Visualizations\n\nIf someone were to only read the label and title of your data visualization, they should still know what it was about\nAll information presented should be self-reinforcing. The content reinforces the titles. The words reinforce the visual, Avoid extraneous or unrelated information.\nThe decision on what to drop is as important as the decision on what to keep.\nOutcome based story development (start with the takeaway and work backwards)\nAsk others to comment/give feedback"
  },
  {
    "objectID": "projects/project-1.html",
    "href": "projects/project-1.html",
    "title": "project-1",
    "section": "",
    "text": "To be filled out soon",
    "crumbs": [
      "Projects",
      "Project 1 (web app)"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "Syllabus.html",
    "href": "Syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "Introduction\nInstructor: Vivian Lew\nOffice: Math Sciences 8923\nContact Info: vlew@stat.ucla.edu\nOffice Hours: M 4pm - 6pm (MS 8923), Th after lecture, and F 3pm-5pm (Zoom). You are welcome to schedule Zoom appointment(s), most days, evenings & weekends too\nMeeting Times and Locations: Th 6pm - 8:50pm Physics & Astronomy 2748\nThe purpose of Statistics 422 is to provide you with a thorough understanding of the fundamentals of data visualization and a working knowledge of how to perform data visualization tasks in R, Python, Tableau and also incorporate supporting tools (e.g., GitHub).",
    "crumbs": [
      "Start Here",
      "Syllabus"
    ]
  },
  {
    "objectID": "Syllabus.html#proposed-learning-outcomes",
    "href": "Syllabus.html#proposed-learning-outcomes",
    "title": "Syllabus",
    "section": "Proposed Learning Outcomes",
    "text": "Proposed Learning Outcomes\nThe overall goal of this course are to provide students with the foundations necessary for understanding and building on their existing data visualization skills. After this quarter, students will have:\n\nAn Understanding of different ways to visually represent data and familiarity with various types of charts and graphs (e.g., bar charts, line graphs, scatter plots, heat maps), and when and how to use them effectively to represent different kinds of data and relationships.\nAn understanding of data models: ways of structuring and organizing data for effective visualization. Understanding different types of data (quantitative, qualitative, spatial) and transformation and visual representation.\nAn understanding of Graphical Perception/perceived visual information. Some of the cognitive principles related to visual perception and using these principles to create compelling visualizations.\nGenerated interactive visualizations\nWritten a reproducible report which conforms to UC Thesis formatting requirements and contains data visualizations. Examples from the eScholarship Repository",
    "crumbs": [
      "Start Here",
      "Syllabus"
    ]
  },
  {
    "objectID": "Syllabus.html#course-materials-resources",
    "href": "Syllabus.html#course-materials-resources",
    "title": "Syllabus",
    "section": "Course Materials & Resources",
    "text": "Course Materials & Resources\nAll course related materials are posted to BruinLearn (https://bruinlearn.ucla.edu/courses/180429), all assignments are uploaded to that site as well typically in the form of PDF files, photographs or recordings. Official course grades are found online on myUCLA only. Other materials used:\n\nHealy, Kieran. Data visualization: a practical introduction. Princeton University Press, 2018.\n\n\nSoftware\nWe will try to strike a balance given the many choices available to us. All of these are free:\n\nR https://www.r-project.org/\n\nggplot2 https://ggplot2.tidyverse.org/\n\nShiny https://shiny.posit.co/r/getstarted/shiny-basics/lesson1/index.html\n\n\nPython https://www.python.org/\n\nTableau https://softwarecentral.ucla.edu/tableau\n\n\n\nOptional Sites\nA GitHub presence is strongly encouraged but not required. Example https://stats422.github.io/\nQuarto is useful but not required. https://quarto.org/\nOverleaf is useful but not required. https://www.overleaf.com/\nO’Reilly library access https://www.oreilly.com/library-access/\nPython Graph Gallery https://python-graph-gallery.com/\n\n\nOptional materials\n\nTufte, Edward R. The visual display of quantitative information. 2nd Ed. Cheshire, CT: Graphics press, 2001.\nYau, Nathan. Visualize this: the FlowingData guide to design, visualization, and statistics. John Wiley & Sons, 2011.\nWickham, Hadley. et. al. R for Data Science, 2nd Edition O’Reilly Media, Inc. 2023\nTidyTuesday",
    "crumbs": [
      "Start Here",
      "Syllabus"
    ]
  },
  {
    "objectID": "Syllabus.html#grading",
    "href": "Syllabus.html#grading",
    "title": "Syllabus",
    "section": "Grading",
    "text": "Grading\nA letter grade is assigned upon the successful completion of this course. The breakdown is:\n\n30% (10 meetings) Attending which means\n\ncontributing to the class, this involves attending class regularly\nTEAM work during class meetings\n\n20% Four (Individual) Homework Assignments\n5% Campuswire - sharing and posting questions and answers, percentage assigned is related to your rep level as determined by Campuswire (e.g., rep level 1 = 1% and top rep level = 5%)\n20% (Individual) Web App: Find your data, Design a page, submit Code and Video for evaluation\n25% (Individual) Final Project: Find your own data, Write a Report, submit Code and Video for evaluation\n\n\n\n\ngrading\n\n\n\nLate Policy\nIf you submit your homework assignments after the due date but before I start the grading, the submission will not be not counted as late. After I begin grading, unsubmitted assignments will be designated as late and can only receive partial credit.\nThe Web App and Final Project should both be submitted by the end of Week 11 as grading will begin immediately after the deadline. I will accept late submissions for partial credit.",
    "crumbs": [
      "Start Here",
      "Syllabus"
    ]
  },
  {
    "objectID": "Syllabus.html#course-outline-this-is-subject-to-change",
    "href": "Syllabus.html#course-outline-this-is-subject-to-change",
    "title": "Syllabus",
    "section": "Course Outline (this is subject to change)",
    "text": "Course Outline (this is subject to change)\n\n\n\nDate\nTopic\nReading\n\n\n\n\nWeek 1 4/4\nFirst Day business; ggplot2; story telling\nHealy Ch. 1 and Ch. 2\n\n\nWeek 2 4/11\nData Exploration/Analysis; Visualization Insights & Types\nWickham Ch. 10; Healy Ch. 3 and Ch. 4, Yau Ch. 3, Wilke - Fundamentals of Data Visualization - Ch. 5\n\n\nWeek 3 4/18\nReorganizing Data, Python Visualization Tools\nYau Ch.2, Wickham Ch. 5; Molin - Hands-On Data Analysis with Pandas\n\n\nWeek 4 4/25\nInteractive: R/Shiny\nWickham - Mastering Shiny\n\n\nWeek 5 5/2\nInteractive: Python tools\nRichards; 30 day challenge; Quartohttps://quarto.org/\n\n\nWeek 6 5/9\nWorking with Spatial Data\nHealy Ch. 7; Yau Ch. 8; Wilke Ch. 15\n\n\nWeek 7 5/16\nGuest Lecture\n\n\n\nWeek 7 5/23\nWorking with Time\nYau Ch. 4; Wilke Ch. 13 and Wilke Ch. 14\n\n\nWeek 8 5/30\nTableau for starters\nMilligan - Learning Tableau;Sleeper - Practical Tableau\n\n\nWeek 10 6/6\nTBD\n\n\n\nWeek 11 6/14\nCompletion of Web App and Final Report",
    "crumbs": [
      "Start Here",
      "Syllabus"
    ]
  },
  {
    "objectID": "Syllabus.html#academic-dishonesty",
    "href": "Syllabus.html#academic-dishonesty",
    "title": "Syllabus",
    "section": "Academic Dishonesty",
    "text": "Academic Dishonesty\nAs Bruins, we uphold the UCLA Student Code of Conduct. Academic dishonesty means activities like plagiarism, unauthorized material used on exams, unauthorized collaborations etc. According to Senate Regulation A-306, if an instructor encounters a problem, the instructor must report it to the Dean of Students.\n\nhttps://www.deanofstudents.ucla.edu/Student-Conduct#10690514-student-conduct-code\nhttps://ucla.app.box.com/s/8xq1jyrvqhs9343e4rzyvporx9lt8u1g\n\n\nChatGPT policy\nYour instructor’s belief is ChatGPT should be used – wisely – as if it were an amazingly clever tutor or friend. But copying and pasting the code of the first example’s (below) ChatGPT response is not learning and chances are, you won’t remember how to do it if you do not do it regularly. Asking ChatGPT questions in the second way gives your mind the opportunity to develop the skills scaffolding and retain the knowledge long after this course is over.\n\n\n\n\n\n\n\nQuestion\nResponse\n\n\n\n\nPlease write some code in R that splits a dataset into test and training.\nTo split a dataset into training and test sets in R, you commonly use a function like createDataPartition from the caret package:  Using the caret package  First, install and load the caret package if you haven’t already:  install.packages(“caret”)  library(caret)  Next, use the createDataPartition function to create a list of indices for the training set, then use these indices to create the training and test sets:  # Load the necessary package library(caret) # Load or import your dataset (replace ‘your_dataset’ with your actual dataset)  # data &lt;- read.csv(“path/to/your/dataset.csv”)  # Create the data partition  set.seed(123) # Set seed for reproducibility  trainIndex &lt;- createDataPartition(data$your_target_variable, p = .8, list = FALSE, times = 1)  # Create training and test datasets trainData &lt;- data[ trainIndex,] testData &lt;- data[-trainIndex,] Replace your_target_variable with the name of the column that contains the target variable you’re interested in, and replace data with your dataset name.\n\n\nPlease teach me on how to write code using base R that splits a dataset into training and test with a 70-30 split - but don’t write the code for me, I want to learn how to think it through on my own.\nAbsolutely, I’d be glad to guide you on how to approach this!   1. Understanding the Data: - Before you begin, familiarize yourself with the dataset. Use functions like str(), head(), and summary() to understand the structure and contents of your data.  2. Setting a Seed: - To ensure that your results are reproducible, you will want to set a seed using the set.seed() function. This function controls the random number generator in R.  3. Determining the Number of Rows: - You need to know the total number of rows in your dataset to create the splits. The nrow() function can help you determine this.  4. Calculating Split Sizes: - Next, determine how many rows should go into your training and test sets. You’ll want 70% of the data to be in the training set and 30% in the test set. Use arithmetic operations to calculate the respective sizes.  5. Creating a Random Sample of Indices: - To create your training set, you’ll need to randomly select 70% of the indices (row numbers) from your dataset. You can use the sample() function to do this. Remember to use the total number of rows and the size of the training set as parameters in this function.  6. Subsetting the Dataset: - Once you have a vector of random indices, use it to subset your dataset into two parts: one for training and one for testing. In R, you can subset a data frame using square brackets []. You’ll use the vector of random indices to select rows for the training set, and the - operator to select the remaining rows for the test set.  7. Verifying Your Split: - After creating your training and test sets, verify that you’ve split the data correctly. Use the dim() function to check the dimensions of each set and ensure the split ratio is approximately 70-30. You can also use the head() function to quickly view the top rows of each set and ensure they look correct.   Remember to write your code step by step, verifying each part before moving on to the next, to avoid confusion and ensure accuracy. Once you are confident in your understanding of each step, try to write the code on your own. Good luck!\n\n\n\nChatGPT is also a wonderful tool to help you with subjects that are outside of your skill set which do not make sense for you to invest huge amounts of time or resources remembering/learning.",
    "crumbs": [
      "Start Here",
      "Syllabus"
    ]
  },
  {
    "objectID": "Syllabus.html#covid-19-health-and-safety",
    "href": "Syllabus.html#covid-19-health-and-safety",
    "title": "Syllabus",
    "section": "COVID-19 health and safety",
    "text": "COVID-19 health and safety\nIn compliance with Los Angeles County policies effective January 6 2023, UCLA strongly recommends indoor masking, regardless of vaccination status. Testing is also strongly encouraged. See\n\nhttps://covid-19.ucla.edu/covid-protocols-at-a-glance/\nhttp://publichealth.lacounty.gov/phcommon/public/media/mediapubHPdisplay.cfm\n\nSome of us might feel more comfortable wearing masks and continuing to social distance, for example, during small-group work in class or section. All of our preferences are reasonable, and it is important that we treat each others’ preferences with respect and care so that we each feel comfortable and prepared to learn in class. You can find the most current policies on campus requirements on the UCLA COVID-19 resources site https://covid-19.ucla.edu/.",
    "crumbs": [
      "Start Here",
      "Syllabus"
    ]
  },
  {
    "objectID": "Syllabus.html#accessible-education",
    "href": "Syllabus.html#accessible-education",
    "title": "Syllabus",
    "section": "Accessible Education",
    "text": "Accessible Education\nStudents with accessibility issues are welcome and encouraged to seek accommodation. Students needing academic accommodations based on a documented disability should contact the Center for Accessible Education (CAE) at (310)825-1501 or in person at Murphy Hall A255. In order to ensure accommodations, students need to contact CAE within the first two weeks of the term.",
    "crumbs": [
      "Start Here",
      "Syllabus"
    ]
  },
  {
    "objectID": "Syllabus.html#resources-for-students-dealing-with-financial-stress",
    "href": "Syllabus.html#resources-for-students-dealing-with-financial-stress",
    "title": "Syllabus",
    "section": "Resources for Students Dealing with Financial Stress",
    "text": "Resources for Students Dealing with Financial Stress\nLife is unpredictable and can create financial emergencies. If you find yourself in this situation, please seek assistance:\n• Bruin Shelter: http://www.bruinshelter.org/ Provides a safe, supportive environment for fellow college students experiencing homelessness by fostering a collaborative effort between universities, community-based organizations, and service providers.\n• The CPO Food Shelter: https://basicneeds.ucla.edu/services/cpo-food-closet Provides free food for any UCLA student who may be experiencing hunger and/or struggling to attain food due to financial hardships.",
    "crumbs": [
      "Start Here",
      "Syllabus"
    ]
  },
  {
    "objectID": "Syllabus.html#title-ix-resources",
    "href": "Syllabus.html#title-ix-resources",
    "title": "Syllabus",
    "section": "Title IX Resources",
    "text": "Title IX Resources\nUCLA prohibits gender discrimination, including sexual harassment, domestic and dating violence, sexual assault, and stalking. If you have experienced sexual harassment or sexual violence, there are a variety of resources to assist you.\n• CONFIDENTIAL RESOURCES: You can receive confidential support and advocacy at the CARE Advocacy Office for Sexual and Gender-Based Violence, 1st Floor Wooden Center West, (310) 206-2465. Counseling and Psychological Services (CAPS) also provides confidential counseling to all students and can be reached 24/7 at (310) 825-0768.\n• NON-CONFIDENTIAL RESOURCES: You can also report sexual violence or sexual harassment directly to the University’s Title IX Coordinator, 2241 Murphy Hall, titleix@conet.ucla.edu, (310) 206-3417. Reports to law enforcement can be made to UCPD at (310) 825-1491. These offices may be required to pursue an official investigation.",
    "crumbs": [
      "Start Here",
      "Syllabus"
    ]
  },
  {
    "objectID": "Syllabus.html#psychological-health-well-being-and-resilience",
    "href": "Syllabus.html#psychological-health-well-being-and-resilience",
    "title": "Syllabus",
    "section": "Psychological Health, Well-Being and Resilience",
    "text": "Psychological Health, Well-Being and Resilience\nUCLA is renowned for academic excellence, and yet we know that many students feel overwhelmed at times by demands to succeed academically, socially and personally. Our campus community is committed to helping all students thrive, learn to cope with stress, and build resilience. Remember, self-care is a skill that is critical to your long-term success. Here are some of the many resources available at UCLA to support you:\n• Counseling and Psychological Services (CAPS): https://www.counseling.ucla.edu/ Provides counseling and other psychological/mental health services to students. Walk-in hours are Monday-Thursday 8am-4:30pm and Friday 9am-4:30pm in John Wooden Center West. Crisis counseling is also available 24 hours/day at (310) 825-0768.\n• Ashe Student Health and Wellness Center: http://www.studenthealth.ucla.edu Provides high quality and accessible ambulatory healthcare and education by caring professionals to support the academic success and personal development of all UCLA students.\n• Healthy Campus Initiative (HCI): https://healthy.ucla.edu Provides links to a wide variety of resources for enhancing physical and psychological well-being, positive social interactions, healthy sleep, healthy eating, healthy physical activity and more.\n• Campus and Student Resilience: https://risecenter.ucla.edu/ Provides programs to promote resilience and trains students to help support their peers.\n• UCLA Recreation: https://www.recreation.ucla.edu/ Offers a broad array of services and programs including fitness, yoga, dance, martial arts, meditation, sports, and much more.\n• Equity, Diversity and Inclusion: https://equity.ucla.edu/ Committed to providing an equal learning, working and living environment at UCLA and supports a range of programs to promote these goals campus-wide.",
    "crumbs": [
      "Start Here",
      "Syllabus"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#aside-uiux",
    "href": "lectures/Lecture04.html#aside-uiux",
    "title": "Lecture 04",
    "section": "Aside UI/UX",
    "text": "Aside UI/UX\n\nInterface design starts with user experience (UX) research and design.\nUnderstand the target audience think what will create the best experience\n\nPhysical needs\nCognitive needs\nPleasing appearance\n\nHave an idea about what is most likely to work with the target audience",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#aside-uiux-1",
    "href": "lectures/Lecture04.html#aside-uiux-1",
    "title": "Lecture 04",
    "section": "Aside UI/UX",
    "text": "Aside UI/UX\n\nUI is user interface the focus is on the actual graphical and interactive elements of the web app\nMenus, the navigation systems, buttons, tabs ec.\nUI design is what the user uses and sees when using an application",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#concept---simplicity",
    "href": "lectures/Lecture04.html#concept---simplicity",
    "title": "Lecture 04",
    "section": "Concept - Simplicity",
    "text": "Concept - Simplicity\n\nKeep the visualizations uncluttered.\nElements of the graphic should contribute to the viewer’s understanding of the data\n\nThe visualization will be clearer\nand more effective.",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#simplicity---avoid-too-many-graphics",
    "href": "lectures/Lecture04.html#simplicity---avoid-too-many-graphics",
    "title": "Lecture 04",
    "section": "Simplicity - avoid too many graphics",
    "text": "Simplicity - avoid too many graphics\n\nExcessive decorative graphics lead to distraction\n\nunnecessary background images\nornate font styles\ndecorative borders\n\n\n\nif addtional graphics do not offer additional information or context for your main graphic/story, consider leaving them out",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#simplicity---avoid-too-much-data",
    "href": "lectures/Lecture04.html#simplicity---avoid-too-much-data",
    "title": "Lecture 04",
    "section": "Simplicity - avoid too much data",
    "text": "Simplicity - avoid too much data\n\nOmit data that is not relevant to the analysis or story\n\nBeware of confusing the audience.\nIf you are talking about trends over time, proably shouldn’t display individual data points (use lines)\nThe extra data will not contribute to understanding the trend.",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#simplicity---avoid-overdoing-color",
    "href": "lectures/Lecture04.html#simplicity---avoid-overdoing-color",
    "title": "Lecture 04",
    "section": "Simplicity - avoid overdoing color",
    "text": "Simplicity - avoid overdoing color\n\nUsing too many colors or very bright colors can lead to visual confusion.\nUse color to highlight significant data points\nUse color to highlight important categories\n\n\nThink twice before using color only to make a graph colorful.",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#simplicity---avoid-too-many-dimensions",
    "href": "lectures/Lecture04.html#simplicity---avoid-too-many-dimensions",
    "title": "Lecture 04",
    "section": "Simplicity - avoid too many dimensions",
    "text": "Simplicity - avoid too many dimensions\n\nAdding a third dimension to a visualization can complicate the interpretation.\n\nUsing a 3D chart where a 2D chart is acceptable may make it more difficult for others to interpret your chart/see your story.\nHumans don’t process those kinds of images as well as they process simpler (e.g. bar chart) designs.",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#simplicity---avoid-unnecessary-labels",
    "href": "lectures/Lecture04.html#simplicity---avoid-unnecessary-labels",
    "title": "Lecture 04",
    "section": "Simplicity - avoid unnecessary labels",
    "text": "Simplicity - avoid unnecessary labels\n\nToo many labels can clutter a visualization.\nDon’t need to label every single data point\nTry grouping labels if you really need them",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#concept---balance",
    "href": "lectures/Lecture04.html#concept---balance",
    "title": "Lecture 04",
    "section": "Concept - Balance",
    "text": "Concept - Balance\n\nIdea - the elements of a graphic have different “weights” (perception)\n\nDifferent graphical elements have the power to draw attention differently\nBe mindful of size, color, texture, and position",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#balance---size",
    "href": "lectures/Lecture04.html#balance---size",
    "title": "Lecture 04",
    "section": "Balance - Size",
    "text": "Balance - Size\n\nLarger elements draw more attention than smaller ones\nTherefore, label key information in larger fonts\nPlot important data with bigger markers",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#section",
    "href": "lectures/Lecture04.html#section",
    "title": "Lecture 04",
    "section": "",
    "text": "Balance - Color\n\nBright colors and/or high contrast colors draw more attention than muted colors.\n\na bright red point on a graph will draw the eye faster than a pale blue one\n\nFlat color backgrounds in particular, can help to create simple designs\n\nThey can reduce visual clutter and distractions which helps data points, lines, and labels to stand out.\nCan unify different elements of a visualization when there are multiple types of data representations (e.g., bars, lines, and points) in the same graphic",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#balance---complexity",
    "href": "lectures/Lecture04.html#balance---complexity",
    "title": "Lecture 04",
    "section": "Balance - Complexity",
    "text": "Balance - Complexity\n\nComplex graphical elements in shape or texture attract more attention than simple ones.\nA data point represented by a complex icon might stand out more than one represented by a simple circle.",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#balance---position",
    "href": "lectures/Lecture04.html#balance---position",
    "title": "Lecture 04",
    "section": "Balance - Position",
    "text": "Balance - Position\n\nGraphical elements placed in the center are often perceived as “heavier” than those near the edges.\nIn the US (and other left to right reading nations) graphical elements placed in the top left area can get more attention.\nThe opposite is true of nations where reading runs from right to left.",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#balance---quantity",
    "href": "lectures/Lecture04.html#balance---quantity",
    "title": "Lecture 04",
    "section": "Balance - Quantity",
    "text": "Balance - Quantity\n\nMany small graphical elements grouped together can collectively hold more visual weight than one large graphical element.\nThis is relevant for visualizations like scatter plots and heat maps.",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#concept---alignmentflow",
    "href": "lectures/Lecture04.html#concept---alignmentflow",
    "title": "Lecture 04",
    "section": "Concept - Alignment/Flow",
    "text": "Concept - Alignment/Flow\n\nIt’s not just about text\nAll elements in a graphic should work together to create an organized appearance\n\nThis helps lead a viewer’s eye through your story/data\n\nStrategic placement and organization of all visual elements within a graph, dashboard, or any infographic helps clarity and cohesion.",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#checklist---alignmentflow",
    "href": "lectures/Lecture04.html#checklist---alignmentflow",
    "title": "Lecture 04",
    "section": "Checklist - Alignment/Flow",
    "text": "Checklist - Alignment/Flow\n\nAligning text and labels for easily correlation with values\nTitles and subtitles in a consistent position\nMultiple graphical comparisons? - use parallel axes and uniform scales if posible",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#concept---uniformity",
    "href": "lectures/Lecture04.html#concept---uniformity",
    "title": "Lecture 04",
    "section": "Concept - Uniformity",
    "text": "Concept - Uniformity\n\nTo help your viewer focus on interpretation and understanding your story, you reduce the cognitive load by:\nsimilar color schemes\nconsistent axes\nrecurring shapes or symbols\n\n\nYou do not want them spending time figuring out what each element represents each time they look at a visualization in your report/thesis/etc.",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#considerations",
    "href": "lectures/Lecture04.html#considerations",
    "title": "Lecture 04",
    "section": "Considerations",
    "text": "Considerations\nAlways Focus on the Message!\n\nBefore adding additional elements:\n\nask if it helps communicate the core message\n\nWatch your use of White Space\n\nEffective use of white space can reduce clutter\nEffective use of white space can focus attention on the story.",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#considerations-1",
    "href": "lectures/Lecture04.html#considerations-1",
    "title": "Lecture 04",
    "section": "Considerations",
    "text": "Considerations\n\nDesign a visualization so that the most important information catches the viewer’s eye first\nThen follow it with the secondary details\nThis can be accomplished through good use of size, color, and placement.\nKeep the focus on the story that you are trying to “tell”",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#section-1",
    "href": "lectures/Lecture04.html#section-1",
    "title": "Lecture 04",
    "section": "",
    "text": "What is Shiny?\n\nR Shiny is used for creating interactive web applications in R. Users can change what they see using Shiny.\nShiny is for others to interactively explore our data. Users do not need to know R.\nShiny can be used to analyze data and create graphics and summaries - but the point is it is typically built for others.\nIf your data updates, Shiny can automatically update the data. This means users always see the most current information.",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#section-2",
    "href": "lectures/Lecture04.html#section-2",
    "title": "Lecture 04",
    "section": "",
    "text": "How does Shiny work?\n\nWe use R to write the code for what the Shiny app should do with the data, e.g. compute summary stats, draw graphs, etc.\nWe also use R to design what the app will look like.\n\nexample — where the buttons, graphs, and sliders will be placed on a screen.\n\nThe R Shiny function converts your code into a web app that can be accessed through a browser",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#section-3",
    "href": "lectures/Lecture04.html#section-3",
    "title": "Lecture 04",
    "section": "",
    "text": "Creating a Shiny app using RStudio\nSelect File-New File-Shiny Web App",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#section-4",
    "href": "lectures/Lecture04.html#section-4",
    "title": "Lecture 04",
    "section": "",
    "text": "Set Up - choices\nChoose a name, choose a single file (app.R when just starting out), choose a location on your local drive to store your app",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#section-5",
    "href": "lectures/Lecture04.html#section-5",
    "title": "Lecture 04",
    "section": "",
    "text": "In RStudio\nThere should now be a new folder with an RStudio created demo file in it. Click on “Run App” in the source windown",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#section-6",
    "href": "lectures/Lecture04.html#section-6",
    "title": "Lecture 04",
    "section": "",
    "text": "In RStudio\nIf you run the app (green triangle icon on the upper right) the default Old Faithful Shiny app should pop up",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#section-7",
    "href": "lectures/Lecture04.html#section-7",
    "title": "Lecture 04",
    "section": "",
    "text": "In RStudio\nYou can open it in your browser to get a better look",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#section-8",
    "href": "lectures/Lecture04.html#section-8",
    "title": "Lecture 04",
    "section": "",
    "text": "If your team has R, library(shiny) then try\nrunExample(\"01_hello\")      # a histogram\nrunExample(\"02_text\")       # tables and data frames\nrunExample(\"03_reactivity\") # a reactive expression\nrunExample(\"04_mpg\")        # global variables\nrunExample(\"05_sliders\")    # slider bars\nrunExample(\"06_tabsets\")    # tabbed panels\nrunExample(\"07_widgets\")    # help text and submit buttons\nrunExample(\"08_html\")       # Shiny app built from HTML\nrunExample(\"09_upload\")     # file upload wizard\nrunExample(\"10_download\")   # file download wizard\nrunExample(\"11_timer\")      # an automated timer",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#section-9",
    "href": "lectures/Lecture04.html#section-9",
    "title": "Lecture 04",
    "section": "",
    "text": "If your teams want to try Shiny on Webr\nhttps://georgestagg.github.io/duckdb-flights-shinylive/\nIt would make a good final project for your webapp to get this running:\nhttps://github.com/posit-dev/r-shinylive?tab=readme-ov-file",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#section-10",
    "href": "lectures/Lecture04.html#section-10",
    "title": "Lecture 04",
    "section": "",
    "text": "Shiny galleries\nhttps://shiny.posit.co/r/gallery/#feature-demos\nhttps://shiny.posit.co/r/gallery/#user-showcase",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#section-11",
    "href": "lectures/Lecture04.html#section-11",
    "title": "Lecture 04",
    "section": "",
    "text": "Steps/Logic of App.R\n\n\n\n\n\nWe call up the library(Shiny)\nand start with the construction of a user interface UI\nthe first step is to create a top level page layout",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#section-12",
    "href": "lectures/Lecture04.html#section-12",
    "title": "Lecture 04",
    "section": "",
    "text": "Steps/Logic of App.R (cont’d)\n\nShiny apps are hierarchical and logical\nIn their demo, fluidPage() function is used to create a fluid layout for Shiny web applications.\nWith fluid layout the page will automatically adjust its layout to fit the size of the user’s browser window.\nThis makes the user interface responsive and adaptable to different screen sizes making the Shiny app more appealing",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#section-13",
    "href": "lectures/Lecture04.html#section-13",
    "title": "Lecture 04",
    "section": "",
    "text": "Steps/Logic of App.R (cont’d)\n\n\n\n\n\nInside the page layout, panels are used to place controls and content\nHere we have a sidebar layout whichs divides the screen into a main panel (output) and a sidebar panel (input)",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#section-14",
    "href": "lectures/Lecture04.html#section-14",
    "title": "Lecture 04",
    "section": "",
    "text": "Steps/Logic of App.R (cont’d)\n\n\n\n\n\nHere we see the server side of the Shiny app\nThis is where the computations, data manipulation, and reactive connections between the UI inputs and server outputs happen",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#section-15",
    "href": "lectures/Lecture04.html#section-15",
    "title": "Lecture 04",
    "section": "",
    "text": "Takeaways\n\nShiny apps have a UI that accepts input and displays output\nThe UI passess the input to the server\nShiny apps have a server that receives input from the UI and generates output that is passed bak to the UI for display\nProcess using shinyApp(ui = ui, server = server) at the end",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#section-16",
    "href": "lectures/Lecture04.html#section-16",
    "title": "Lecture 04",
    "section": "",
    "text": "Taking it all apart\n\nI have an example file that does nothing. It is named Shiny0_proof.R\nIt exists to give you the absolute minimum that is needed to make Shiny run",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#section-17",
    "href": "lectures/Lecture04.html#section-17",
    "title": "Lecture 04",
    "section": "",
    "text": "In RStudio\n\nThe blank window is correct, now we will expand on it.",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#section-18",
    "href": "lectures/Lecture04.html#section-18",
    "title": "Lecture 04",
    "section": "",
    "text": "Websites\n\nhttps://shiny.posit.co/ Homepage\nhttps://github.com/rstudio/shiny GitHub\nhttps://github.com/rstudio/shiny Mastering Shiny (online text)",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#section-19",
    "href": "lectures/Lecture04.html#section-19",
    "title": "Lecture 04",
    "section": "",
    "text": "Cheatsheet for Shiny\n\nIn “Building an App” it lays out the structure for you.",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#section-20",
    "href": "lectures/Lecture04.html#section-20",
    "title": "Lecture 04",
    "section": "",
    "text": "UI Input Choices",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#section-21",
    "href": "lectures/Lecture04.html#section-21",
    "title": "Lecture 04",
    "section": "",
    "text": "UI Closeup (shiny1_ui_only.R)\n\ntitlePanel() and sliderInput() notice the comma just before h1()",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#section-22",
    "href": "lectures/Lecture04.html#section-22",
    "title": "Lecture 04",
    "section": "",
    "text": "UI Closeup (shiny1_ui_only.R) (cont’d)\n\nvarious text control",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#section-23",
    "href": "lectures/Lecture04.html#section-23",
    "title": "Lecture 04",
    "section": "",
    "text": "UI Closeup Result\n\nRendered Result",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#section-24",
    "href": "lectures/Lecture04.html#section-24",
    "title": "Lecture 04",
    "section": "",
    "text": "UI Closeup with image and bullets",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#section-25",
    "href": "lectures/Lecture04.html#section-25",
    "title": "Lecture 04",
    "section": "",
    "text": "UI Closeup with image and bullets result",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#section-26",
    "href": "lectures/Lecture04.html#section-26",
    "title": "Lecture 04",
    "section": "",
    "text": "The UI is an HTML document",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#section-27",
    "href": "lectures/Lecture04.html#section-27",
    "title": "Lecture 04",
    "section": "",
    "text": "Remainder of shiny1_ui_only.R",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#section-28",
    "href": "lectures/Lecture04.html#section-28",
    "title": "Lecture 04",
    "section": "",
    "text": "At this point\n\nThere is no data, moving the slider just moves the slider\nThere is user input being collected, but the input isn’t being processed\nThe ui ends with the close parenthesis (note no comma)\nWe have not given instructions to the server for output\nshinyApp(ui = ui, server = server) runs and we have a Shiny app",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#section-29",
    "href": "lectures/Lecture04.html#section-29",
    "title": "Lecture 04",
    "section": "",
    "text": "Build Server side with render & output\n\nSee shiny2-ui_server_output.R\nThe remainder of Shiny is rendering input then results are output.",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#section-30",
    "href": "lectures/Lecture04.html#section-30",
    "title": "Lecture 04",
    "section": "",
    "text": "UI modified\n\n\n\nIn shiny2-ui_server_output.R, user input will be passed to the server and rendered.\n\nUI changes a bit with some output functions - plotOutput(), textOutput(), DTOutput() and tableOutput()\nThe output functions will be connected to render functions",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#section-31",
    "href": "lectures/Lecture04.html#section-31",
    "title": "Lecture 04",
    "section": "",
    "text": "A closer look\n\n\n\nThere are four render-output pairs,\nthe rendering occurs in server\nthe first of the render functions here has a variable passed to it from ui:",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#section-32",
    "href": "lectures/Lecture04.html#section-32",
    "title": "Lecture 04",
    "section": "",
    "text": "Notes on user input and render\n\nWithin the {} in renderPlot() is the R code that will build a histogram\nOnly R code in the server portion, notice, just hist() from base R no html etc.\nAccess the input values with input$\nThe “num” in input$num is the value assigned to inputID in the sliderInput of the UI",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#section-33",
    "href": "lectures/Lecture04.html#section-33",
    "title": "Lecture 04",
    "section": "",
    "text": "render-output notes\n\n\n\n\n\nserver is a function built using render functions\nthe output contains values which are passed back to UI\nsome values could originate from the server side (e.g. generated values)",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#section-34",
    "href": "lectures/Lecture04.html#section-34",
    "title": "Lecture 04",
    "section": "",
    "text": "render-output and ui together",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#section-35",
    "href": "lectures/Lecture04.html#section-35",
    "title": "Lecture 04",
    "section": "",
    "text": "Result",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#section-36",
    "href": "lectures/Lecture04.html#section-36",
    "title": "Lecture 04",
    "section": "",
    "text": "Result",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#section-37",
    "href": "lectures/Lecture04.html#section-37",
    "title": "Lecture 04",
    "section": "",
    "text": "Ready to Publish?\n\nNot that I would publish my example tonight, but I could.\nPublishing options, see publishing Shiny\nYou can also have users download your app.R see this example from GitHub\nex. runGist(\"8ad7b367f0d4d9947a94c5387900b2bd\") make sure your Shiny app has a standard name like app.R and not my non-standard ones.\nRuns in R, need library(shiny) active",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#section-38",
    "href": "lectures/Lecture04.html#section-38",
    "title": "Lecture 04",
    "section": "",
    "text": "My Gist Example\n\nI have access to earthquake data in Southern California\nI can create a Shiny app so my users could select a specific time frame and map the earthquakes.\nThey might adjust their choices to see data from different years, or click on the map to get different information about a particular are.",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#section-39",
    "href": "lectures/Lecture04.html#section-39",
    "title": "Lecture 04",
    "section": "",
    "text": "Running Gist\n\nAn anonymous way to post files online, GitHub has a pasteboard at gist.github.com.\n\nCopy and paste your app.R files to the gist web page.\nSAVE the URL that GitHub gives the gist\n\nA user can launch the app with runGist(\"\\&lt;gist number\\&gt;\")\n“&lt;gist number&gt;” is the number that appears at the end the URL",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#section-40",
    "href": "lectures/Lecture04.html#section-40",
    "title": "Lecture 04",
    "section": "",
    "text": "Recall Storytelling but now with tools like Shiny\n\nA good story is vital for making data relatable and engaging.\nWho is the audience? Who will use your creation? (e.g., executives, analysts).\nOutline the key message or story.\nUse something like Post-Its & Sharpies to help",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#section-41",
    "href": "lectures/Lecture04.html#section-41",
    "title": "Lecture 04",
    "section": "",
    "text": "Applying Design Features from earlier\n\nClarity & focus\nYou may need to guide people through your data (tabs?)\nYou may need to keep their attention (size, color, etc.)\nUse a consistent design\nStart with a simple interface and elaborate",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture04.html#section-42",
    "href": "lectures/Lecture04.html#section-42",
    "title": "Lecture 04",
    "section": "",
    "text": "Do we have time? teams?\n\nUse Post-Its to map out a simple Shiny layout on a wall or board.\nEach Post-It will represent a component of your layout (chart, table, filter, etc.).\nArrange the Post-Its to create tell a story that “flows”.\nTalk about it - can your whole team see the story?\nThis is pointing us to homework 3 and your web app. Sharing a story.",
    "crumbs": [
      "Lectures",
      "Lecture 04 Shiny"
    ]
  },
  {
    "objectID": "lectures/Lecture02.html#announcements",
    "href": "lectures/Lecture02.html#announcements",
    "title": "Lecture 02",
    "section": "Announcements",
    "text": "Announcements\n\nAdvisors and Advising\n\nfaculty\n\nData\nSoftware\nReproducible",
    "crumbs": [
      "Lectures",
      "Lecture 02"
    ]
  },
  {
    "objectID": "lectures/Lecture02.html#setup",
    "href": "lectures/Lecture02.html#setup",
    "title": "Lecture 02",
    "section": "Setup",
    "text": "Setup\n\n# load packages\nlibrary(tidyverse)\nlibrary(readr)\nlibrary(viridis)\n# set figure parameters for knitr\nknitr::opts_chunk$set(\n  fig.align = \"center\", # center align figures\n  fig.asp = 0.618,      # the golden ratio\n  fig.retina = 3,       # dpi multiplier for displaying HTML output on retina\n  fig.height = 4,        # 4 inches\n  dpi = 200             # higher is crisper\n)",
    "crumbs": [
      "Lectures",
      "Lecture 02"
    ]
  },
  {
    "objectID": "lectures/Lecture02.html#section",
    "href": "lectures/Lecture02.html#section",
    "title": "Lecture 02",
    "section": "",
    "text": "Summary Points for Chapter 1\n\nColor is a highly effective way to communicate information and highlight specific elements within a visualization.\nColor &gt; Shape\nLarge numbers of observations should be summarized\nCombining color, shape, size, texture, can be tricky opacity",
    "crumbs": [
      "Lectures",
      "Lecture 02"
    ]
  },
  {
    "objectID": "lectures/Lecture02.html#section-1",
    "href": "lectures/Lecture02.html#section-1",
    "title": "Lecture 02",
    "section": "",
    "text": "Summary Points for Chapter 1 (cont’d)\nArticle (optional) by Heer & Bostock",
    "crumbs": [
      "Lectures",
      "Lecture 02"
    ]
  },
  {
    "objectID": "lectures/Lecture02.html#section-2",
    "href": "lectures/Lecture02.html#section-2",
    "title": "Lecture 02",
    "section": "",
    "text": "Summary Points for Chapter 1 (cont’d)\nRecall storytelling",
    "crumbs": [
      "Lectures",
      "Lecture 02"
    ]
  },
  {
    "objectID": "lectures/Lecture02.html#section-3",
    "href": "lectures/Lecture02.html#section-3",
    "title": "Lecture 02",
    "section": "",
    "text": "Summary Points for Chapter 1 (cont’d)\nFlexibility is important too. Rules? Not really.",
    "crumbs": [
      "Lectures",
      "Lecture 02"
    ]
  },
  {
    "objectID": "lectures/Lecture02.html#section-4",
    "href": "lectures/Lecture02.html#section-4",
    "title": "Lecture 02",
    "section": "",
    "text": "Geoms\n\nThe geoms (geometric objects) control the plot type used to represent the data\nRecall https://rstudio.github.io/cheatsheets/html/data-visualization.html",
    "crumbs": [
      "Lectures",
      "Lecture 02"
    ]
  },
  {
    "objectID": "lectures/Lecture02.html#section-5",
    "href": "lectures/Lecture02.html#section-5",
    "title": "Lecture 02",
    "section": "",
    "text": "One Continuous Variable",
    "crumbs": [
      "Lectures",
      "Lecture 02"
    ]
  },
  {
    "objectID": "lectures/Lecture02.html#section-6",
    "href": "lectures/Lecture02.html#section-6",
    "title": "Lecture 02",
    "section": "",
    "text": "One Continuous Variable\n\nAreaAreasDensity",
    "crumbs": [
      "Lectures",
      "Lecture 02"
    ]
  },
  {
    "objectID": "lectures/Lecture02.html#section-7",
    "href": "lectures/Lecture02.html#section-7",
    "title": "Lecture 02",
    "section": "",
    "text": "One Continuous Variable (cont’d)\n\nDotplotDotplot + JitterFreqpolyHistogram",
    "crumbs": [
      "Lectures",
      "Lecture 02"
    ]
  },
  {
    "objectID": "lectures/Lecture02.html#section-8",
    "href": "lectures/Lecture02.html#section-8",
    "title": "Lecture 02",
    "section": "",
    "text": "One Discrete Variable\nTypically non-numeric but ordered or limited values work here",
    "crumbs": [
      "Lectures",
      "Lecture 02"
    ]
  },
  {
    "objectID": "lectures/Lecture02.html#section-9",
    "href": "lectures/Lecture02.html#section-9",
    "title": "Lecture 02",
    "section": "",
    "text": "One Discrete Variable\n\nBarBarHoriz.Bar with coord_polar (donut)",
    "crumbs": [
      "Lectures",
      "Lecture 02"
    ]
  },
  {
    "objectID": "lectures/Lecture02.html#section-10",
    "href": "lectures/Lecture02.html#section-10",
    "title": "Lecture 02",
    "section": "",
    "text": "Two Continuous Variables",
    "crumbs": [
      "Lectures",
      "Lecture 02"
    ]
  },
  {
    "objectID": "lectures/Lecture02.html#section-11",
    "href": "lectures/Lecture02.html#section-11",
    "title": "Lecture 02",
    "section": "",
    "text": "Two Continuous Variables\n\nPointCluster 1Cluster 2Bubble",
    "crumbs": [
      "Lectures",
      "Lecture 02"
    ]
  },
  {
    "objectID": "lectures/Lecture02.html#section-12",
    "href": "lectures/Lecture02.html#section-12",
    "title": "Lecture 02",
    "section": "",
    "text": "Two Continuous Variables\n\nQuantile Reg.RugSmoothSmooth 2",
    "crumbs": [
      "Lectures",
      "Lecture 02"
    ]
  },
  {
    "objectID": "lectures/Lecture02.html#section-13",
    "href": "lectures/Lecture02.html#section-13",
    "title": "Lecture 02",
    "section": "",
    "text": "Two Continuous Variables\n\nPrepTextLabelrepel",
    "crumbs": [
      "Lectures",
      "Lecture 02"
    ]
  },
  {
    "objectID": "lectures/Lecture02.html#section-14",
    "href": "lectures/Lecture02.html#section-14",
    "title": "Lecture 02",
    "section": "",
    "text": "One Discrete/One Continuous",
    "crumbs": [
      "Lectures",
      "Lecture 02"
    ]
  },
  {
    "objectID": "lectures/Lecture02.html#section-15",
    "href": "lectures/Lecture02.html#section-15",
    "title": "Lecture 02",
    "section": "",
    "text": "Discrete & Continuous\n\nColflipped & orderedNotes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngeom_col requires x and y values. \n\nThe heights of the bars represent __values__ \nin the data\n\nThe trick to ordering is to utilize factors",
    "crumbs": [
      "Lectures",
      "Lecture 02"
    ]
  },
  {
    "objectID": "lectures/Lecture02.html#section-16",
    "href": "lectures/Lecture02.html#section-16",
    "title": "Lecture 02",
    "section": "",
    "text": "One Discrete/One Continuous (cont’d)\n\nBoxplotHoriz.Mult.Switched",
    "crumbs": [
      "Lectures",
      "Lecture 02"
    ]
  },
  {
    "objectID": "lectures/Lecture02.html#section-17",
    "href": "lectures/Lecture02.html#section-17",
    "title": "Lecture 02",
    "section": "",
    "text": "One Discrete/One Continuous (cont’d)\n\nviolinplotHoriz.Mult.Switched",
    "crumbs": [
      "Lectures",
      "Lecture 02"
    ]
  },
  {
    "objectID": "lectures/Lecture02.html#section-18",
    "href": "lectures/Lecture02.html#section-18",
    "title": "Lecture 02",
    "section": "",
    "text": "Two Continuous",
    "crumbs": [
      "Lectures",
      "Lecture 02"
    ]
  },
  {
    "objectID": "lectures/Lecture02.html#section-19",
    "href": "lectures/Lecture02.html#section-19",
    "title": "Lecture 02",
    "section": "",
    "text": "Two Continuous Variables\n\nContourHeatmapHeatmapContour",
    "crumbs": [
      "Lectures",
      "Lecture 02"
    ]
  },
  {
    "objectID": "lectures/Lecture02.html#section-20",
    "href": "lectures/Lecture02.html#section-20",
    "title": "Lecture 02",
    "section": "",
    "text": "Two Continuous Variables\n\nhex_1hex_2",
    "crumbs": [
      "Lectures",
      "Lecture 02"
    ]
  },
  {
    "objectID": "lectures/Lecture02.html#section-21",
    "href": "lectures/Lecture02.html#section-21",
    "title": "Lecture 02",
    "section": "",
    "text": "Two Continuous Variables\n\nArealine",
    "crumbs": [
      "Lectures",
      "Lecture 02"
    ]
  },
  {
    "objectID": "lectures/Lecture02.html#two-discrete-variables",
    "href": "lectures/Lecture02.html#two-discrete-variables",
    "title": "Lecture 02",
    "section": "Two Discrete(?) Variables",
    "text": "Two Discrete(?) Variables\nTile",
    "crumbs": [
      "Lectures",
      "Lecture 02"
    ]
  },
  {
    "objectID": "lectures/Lecture02.html#two-discrete-variables-1",
    "href": "lectures/Lecture02.html#two-discrete-variables-1",
    "title": "Lecture 02",
    "section": "Two Discrete(?) Variables",
    "text": "Two Discrete(?) Variables\nTile + Facet",
    "crumbs": [
      "Lectures",
      "Lecture 02"
    ]
  },
  {
    "objectID": "lectures/Lecture01.html#late-afternoon-social",
    "href": "lectures/Lecture01.html#late-afternoon-social",
    "title": "Welcome Statistics 422",
    "section": "Late afternoon social",
    "text": "Late afternoon social\nLet’s use this time to interact & relax before getting started\n\n\nPlease gather in small groups (minimum 3 classmates, maximum 6)\nIf you don’t know someone please introduce yourself\nIf your group sees someone without a group, please extend an invitation to join",
    "crumbs": [
      "Lectures",
      "Lecture 01"
    ]
  },
  {
    "objectID": "lectures/Lecture01.html#section",
    "href": "lectures/Lecture01.html#section",
    "title": "Welcome Statistics 422",
    "section": "",
    "text": "Instructor\nDr. Vivian Lew\n\nMath Sciences 8923 (neighbor is Nicolas Christou)\nBruinLearn e-mail is the best way to reach me\nNo discussion or TA or grader for this course\n\n\nOther Course Details\n\nMeet Once a Week Thursdays 6pm- 8:50pm\n\nPhysics and Astronomy Building 2748\n\nOffice Hours\n\nM 4pm - 6pm (MS 8923) & F 3pm-5pm (Zoom)\nWelcome to schedule Zoom appointment(s), most evenings & weekends too",
    "crumbs": [
      "Lectures",
      "Lecture 01"
    ]
  },
  {
    "objectID": "lectures/Lecture01.html#what-to-expect",
    "href": "lectures/Lecture01.html#what-to-expect",
    "title": "Welcome Statistics 422",
    "section": "What to expect",
    "text": "What to expect\n\nFormat: During Class\n\nWorkshop style - some lecturing, some small group activities, breaks\nInteractive - please bring your electronics (laptop, iPad, maybe phone)\n\nFormat: Outside of Class\n\nIndividual homework assignments, individual late mid-quarter project, individual final project\nEncourage interaction with me but more important, with each other\nStats 422 Community interaction on Campuswire, perhaps examine the weekly data posted to Tidy Tuesday",
    "crumbs": [
      "Lectures",
      "Lecture 01"
    ]
  },
  {
    "objectID": "lectures/Lecture01.html#what-to-expect-1",
    "href": "lectures/Lecture01.html#what-to-expect-1",
    "title": "Welcome Statistics 422",
    "section": "What to expect",
    "text": "What to expect\nDeveloping the scaffolding needed for understanding and building on one’s existing data visualization skills.\n\nAspects\n\nTranslating data and the relationships within visually for others.\n\nLearning to structure and organize data for effective visualization.\n\nLearning about the different types of visual representation and their purposes.\nUnderstanding of Graphical Perception/perceived visual information and some of the cognitive principles involved.\nLearning to generate static and interactive visualizations\nKnowing how to present your visualizations in different media (print, website, video)",
    "crumbs": [
      "Lectures",
      "Lecture 01"
    ]
  },
  {
    "objectID": "lectures/Lecture01.html#what-to-expect-2",
    "href": "lectures/Lecture01.html#what-to-expect-2",
    "title": "Welcome Statistics 422",
    "section": "What to expect",
    "text": "What to expect\n\nProcess\n\nStart with an audience and an idea and find the data (not necessarily in that order)\nPrepare the data for visualization (e.g., clean, pivot)\nRepresent the data visually with various graphical elements (e.g., color, sizes, and shape)\nPost-process the data (e.g., decide whether interactivity would add power, post process a static visualization )\n\nTools\n\nR/ggplot2, Shiny; Python/matplotlib, Streamlit; Tableau",
    "crumbs": [
      "Lectures",
      "Lecture 01"
    ]
  },
  {
    "objectID": "lectures/Lecture01.html#what-is-not-covered",
    "href": "lectures/Lecture01.html#what-is-not-covered",
    "title": "Welcome Statistics 422",
    "section": "What is not covered",
    "text": "What is not covered\n\nWhat is not there\n\nno instruction in JavaScript\nno instruction in HTML5\nno instruction in CSS\n\nIf any of you know a pro (someone paid to work with these regularly), I could arrange for a stipend if they want to come in as a guest speaker",
    "crumbs": [
      "Lectures",
      "Lecture 01"
    ]
  },
  {
    "objectID": "lectures/Lecture01.html#grading",
    "href": "lectures/Lecture01.html#grading",
    "title": "Welcome Statistics 422",
    "section": "Grading",
    "text": "Grading\n\n30% Attending class weekly with in-class team activity\n20% 4 individual homework assignments\n5% Campuswire participation\n20% Web App: (individual) Find your data, Design a page, Code and Video\n25% Final Project: (individual) Find your own data, Report, Code and Video\nThe data for the Web App can be the same as the final project, but ideally a simple dataset like iris for the Web App and something more complex and more closely related to your thesis for your final project.",
    "crumbs": [
      "Lectures",
      "Lecture 01"
    ]
  },
  {
    "objectID": "lectures/Lecture01.html#group-activity-1-15-20-minutes",
    "href": "lectures/Lecture01.html#group-activity-1-15-20-minutes",
    "title": "Welcome Statistics 422",
    "section": "Group Activity 1 (15-20 minutes)",
    "text": "Group Activity 1 (15-20 minutes)\n\n\nIf you aren’t already in a group, please join one, minimum 3 maximum 6. Please put yourself into a Week 1 group on BruinLearn to get credit for being here tonight.\nSomeone take a team photo (selfie/grelfie/usie/0.5?) and upload an annotated copy to BruinLearn for credit for attending today.\nLet’s take 15-20 minutes to examine and discuss some graphs created by ggplot2.\nhttps://r-charts.com/ggplot2/ or more generally in R https://r-graph-gallery.com/index.html\nIdeally, I would like you to examine R graphics from one or both of these sites as a team and\nPlease choose the one plot from your group that you think is most memorable (can be good or not good), and have one team member share the graph on Campuswire and/or be prepared to tell us why your team chose it.",
    "crumbs": [
      "Lectures",
      "Lecture 01"
    ]
  },
  {
    "objectID": "lectures/Lecture01.html#data-visualization",
    "href": "lectures/Lecture01.html#data-visualization",
    "title": "Welcome Statistics 422",
    "section": "Data visualization",
    "text": "Data visualization\n\nUnderstanding and creating visual representations of data\nR is one of our tools and\nggplot2 is THE package",
    "crumbs": [
      "Lectures",
      "Lecture 01"
    ]
  },
  {
    "objectID": "lectures/Lecture01.html#section-1",
    "href": "lectures/Lecture01.html#section-1",
    "title": "Welcome Statistics 422",
    "section": "",
    "text": "It is part of the Tidyverse in R\n\n\ngg means “Grammar of Graphics”\nThe Grammar of Graphics was written by Leland Wilkinson in 1999.\nWilkinson detailed a comprehensive framework to describe and build a wide range of statistical graphics by breaking down the elements of graphics into a unified system.",
    "crumbs": [
      "Lectures",
      "Lecture 01"
    ]
  },
  {
    "objectID": "lectures/Lecture01.html#grammar-of-graphics",
    "href": "lectures/Lecture01.html#grammar-of-graphics",
    "title": "Welcome Statistics 422",
    "section": "Grammar of Graphics",
    "text": "Grammar of Graphics\n\n\n\nSource: https://www.stat20.org/",
    "crumbs": [
      "Lectures",
      "Lecture 01"
    ]
  },
  {
    "objectID": "lectures/Lecture01.html#data",
    "href": "lectures/Lecture01.html#data",
    "title": "Welcome Statistics 422",
    "section": "Data",
    "text": "Data\n\n\n\n\n\n\n\n\n\nIn GG, data is the foundation\n\nAll graphical representation decisions rest on top of it\n\nAll the decisions are data-driven\n\nResult: meaningful and accurate visual representation of data\n\nAND a wide variety of graphics",
    "crumbs": [
      "Lectures",
      "Lecture 01"
    ]
  },
  {
    "objectID": "lectures/Lecture01.html#aesthetics-aesthetic-mappings",
    "href": "lectures/Lecture01.html#aesthetics-aesthetic-mappings",
    "title": "Welcome Statistics 422",
    "section": "Aesthetics (Aesthetic Mappings)",
    "text": "Aesthetics (Aesthetic Mappings)\n\nThese are the rules\n\nThey map (connect) data variables to the visual properties of the graphical elements\n\nMost frequently - x, y, color, size, and shape\n\nThe connection of data to graphical elements allow us to see/interpret patterns, trends, and anomalies within the data",
    "crumbs": [
      "Lectures",
      "Lecture 01"
    ]
  },
  {
    "objectID": "lectures/Lecture01.html#geometries-include",
    "href": "lectures/Lecture01.html#geometries-include",
    "title": "Welcome Statistics 422",
    "section": "Geometries include",
    "text": "Geometries include\n\nPoints, typically used for individual values\nLines, connect points in some defined order (e.g., time, location)\nBars, typically used for categories (e.g., pizza types)\nPolygons, use to represent areas (maps)\nPaths, fatter lines, used to represent flows (Sankey)",
    "crumbs": [
      "Lectures",
      "Lecture 01"
    ]
  },
  {
    "objectID": "lectures/Lecture01.html#from-the-ggplot2-cheatsheet",
    "href": "lectures/Lecture01.html#from-the-ggplot2-cheatsheet",
    "title": "Welcome Statistics 422",
    "section": "from the ggplot2 cheatsheet",
    "text": "from the ggplot2 cheatsheet",
    "crumbs": [
      "Lectures",
      "Lecture 01"
    ]
  },
  {
    "objectID": "lectures/Lecture01.html#facets-and-layers",
    "href": "lectures/Lecture01.html#facets-and-layers",
    "title": "Welcome Statistics 422",
    "section": "Facets and Layers",
    "text": "Facets and Layers\n\nConditioning the data\nSubsets are facets\nLayers combine multiple types of visualizations into a single graphic",
    "crumbs": [
      "Lectures",
      "Lecture 01"
    ]
  },
  {
    "objectID": "lectures/Lecture01.html#statistics",
    "href": "lectures/Lecture01.html#statistics",
    "title": "Welcome Statistics 422",
    "section": "Statistics",
    "text": "Statistics\n\nData can be summarized or modified prior to visualization\n\nAggregation (like sums or means),\nsmoothing\n\nCan clarify the underlying structure or relationships in data.",
    "crumbs": [
      "Lectures",
      "Lecture 01"
    ]
  },
  {
    "objectID": "lectures/Lecture01.html#coordinates-and-scales",
    "href": "lectures/Lecture01.html#coordinates-and-scales",
    "title": "Welcome Statistics 422",
    "section": "Coordinates and scales",
    "text": "Coordinates and scales\n\nScaling (linear, logarithmic, etc.)\nCoordinate systems (Cartesian, polar, etc.).\nThey influence the position of data points (and the interpretation).",
    "crumbs": [
      "Lectures",
      "Lecture 01"
    ]
  },
  {
    "objectID": "lectures/Lecture01.html#themes",
    "href": "lectures/Lecture01.html#themes",
    "title": "Welcome Statistics 422",
    "section": "Themes",
    "text": "Themes\n\nControl the overall “look” (styling) of the graphic\nfonts, colors\nlabeling, legends, captioning\nlayout etc.",
    "crumbs": [
      "Lectures",
      "Lecture 01"
    ]
  }
]